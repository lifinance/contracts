/**
 * Deploy a Safe multisig contract using the SafeProxyFactory
 * The script combines owners from two sources:
 * 1. The global configuration (config/global.json)
 * 2. Additional owners provided via command line arguments
 *
 * Note: This deployment uses hardcoded bytecode and ABI of Safe contracts v1.4.1
 * and deploys them directly without relying on external files.
 * This approach enables rapid deployments on new chains
 * without waiting for official Safe contract deployments.
 *
 * The script maintains deployment state in networks.json:
 * - Prevents duplicate deployments by checking existing Safe addresses
 * - Automatically updates the Safe address after successful deployment
 *
 * Required Parameters:
 * - network: The target network name (e.g., arbitrum)
 * - threshold: Number of signatures required for transactions
 *
 * Optional Parameters:
 * - owners: Comma-separated list of additional owner addresses
 * - fallbackHandler: Address of the fallback handler contract
 * - paymentToken: Address of the payment token (default: 0x0 for ETH)
 * - payment: Payment amount in wei (default: 0)
 * - paymentReceiver: Address to receive payments (default: 0x0)
 *
 * Environment Variables:
 * - PRIVATE_KEY: Deployer's private key
 * - ETH_NODE_URI_{NETWORK}: RPC URL for the target network (must be configured in .env)
 *
 * Example Usage:
 * bun deploy-and-setup.ts --network arbitrum --threshold 3 --owners 0x123,0x456
 */

import { defineCommand, runMain } from 'citty'
import {
  encodeFunctionData,
  isAddress,
  getAddress,
  Address,
  zeroAddress,
  decodeEventLog,
} from 'viem'
import * as dotenv from 'dotenv'
import { SupportedChain } from '../../demoScripts/utils/demoScriptChainConfig'
import { setupEnvironment } from '../../demoScripts/utils/demoScriptHelpers'
import globalConfig from '../../../config/global.json'
import networks from '../../../config/networks.json'
import { writeFileSync } from 'fs'
import { join } from 'path'
import { consola } from 'consola'

dotenv.config()

// Embedded Safe contract ABI
const SAFE_ABI = [
  // Add setup function and other necessary methods
  {
    inputs: [
      {
        internalType: 'address[]',
        name: '_owners',
        type: 'address[]',
      },
      {
        internalType: 'uint256',
        name: '_threshold',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
      {
        internalType: 'address',
        name: 'fallbackHandler',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'paymentToken',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'payment',
        type: 'uint256',
      },
      {
        internalType: 'address payable',
        name: 'paymentReceiver',
        type: 'address',
      },
    ],
    name: 'setup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  // Add other methods as needed
] as const

// Embedded SafeProxyFactory ABI
const SAFE_PROXY_FACTORY_ABI = [
  // Add createProxyWithNonce and other necessary methods
  {
    inputs: [
      {
        internalType: 'address',
        name: '_singleton',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'initializer',
        type: 'bytes',
      },
      {
        internalType: 'uint256',
        name: 'saltNonce',
        type: 'uint256',
      },
    ],
    name: 'createProxyWithNonce',
    outputs: [
      {
        internalType: 'address',
        name: 'proxy',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'proxy',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'singleton',
        type: 'address',
      },
    ],
    name: 'ProxyCreation',
    type: 'event',
  },
  // Add other methods as needed
] as const

// Embedded bytecode for the Safe contract (replace with actual bytecode)
console.log('Safe Implementation Bytecode:')
const SAFE_BYTECODE =
  '0x6080604052348015600e575f5ffd5b506001600455614126806100215f395ff3fe6080604052600436106101d0575f3560e01c8063affed0e0116100f6578063e19a9dd911610094578063f08a032311610063578063f08a0323146105d2578063f698da25146105f1578063f8dc5dd914610656578063ffa1ad74146106755761020c565b8063e19a9dd914610561578063e318b52b14610580578063e75235b81461059f578063e86637db146105b35761020c565b8063cc2f8452116100d0578063cc2f8452146104d7578063d4d9bdcd14610504578063d8d11f7814610523578063e009cfde146105425761020c565b8063affed0e014610484578063b4faba0914610499578063b63e800d146104b85761020c565b80635624b25b1161016e5780636a7612021161013d5780636a761202146103fb5780637d8329741461040e578063934f3a1114610444578063a0e67e2b146104635761020c565b80635624b25b146103665780635ae6bd3714610392578063610b5925146103bd578063694e80c3146103dc5761020c565b80632f54bf6e116101aa5780632f54bf6e146102df5780633408e470146102fe578063468721a71461031a5780635229073f146103395761020c565b80630d582f131461026b57806312fb68e01461028c5780632d9ad53d146102ab5761020c565b3661020c5760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b348015610217575f5ffd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024257005b365f5f373360601b36525f5f601436015f5f855af190503d5f5f3e80610266573d5ffd5b503d5ff35b348015610276575f5ffd5b5061028a6102853660046134d4565b6106bd565b005b348015610297575f5ffd5b5061028a6102a63660046135f3565b610908565b3480156102b6575f5ffd5b506102ca6102c5366004613668565b610fb5565b60405190151581526020015b60405180910390f35b3480156102ea575f5ffd5b506102ca6102f9366004613668565b611008565b348015610309575f5ffd5b50465b6040519081526020016102d6565b348015610325575f5ffd5b506102ca610334366004613691565b611058565b348015610344575f5ffd5b50610358610353366004613691565b61118a565b6040516102d6929190613743565b348015610371575f5ffd5b5061038561038036600461375d565b6111be565b6040516102d6919061377d565b34801561039d575f5ffd5b5061030c6103ac36600461378f565b60076020525f908152604090205481565b3480156103c8575f5ffd5b5061028a6103d7366004613668565b611238565b3480156103e7575f5ffd5b5061028a6103f636600461378f565b61141f565b6102ca6104093660046137eb565b611539565b348015610419575f5ffd5b5061030c6104283660046134d4565b600860209081525f928352604080842090915290825290205481565b34801561044f575f5ffd5b5061028a61045e3660046138bd565b611923565b34801561046e575f5ffd5b5061047761199f565b6040516102d6919061397a565b34801561048f575f5ffd5b5061030c60055481565b3480156104a4575f5ffd5b5061028a6104b336600461398c565b611ab4565b3480156104c3575f5ffd5b5061028a6104d23660046139d9565b611ad3565b3480156104e2575f5ffd5b506104f66104f13660046134d4565b611bec565b6040516102d6929190613acb565b34801561050f575f5ffd5b5061028a61051e36600461378f565b611e56565b34801561052e575f5ffd5b5061030c61053d366004613b02565b611f28565b34801561054d575f5ffd5b5061028a61055c366004613bc0565b611f54565b34801561056c575f5ffd5b5061028a61057b366004613668565b612124565b34801561058b575f5ffd5b5061028a61059a366004613bf7565b6122c2565b3480156105aa575f5ffd5b5060045461030c565b3480156105be575f5ffd5b506103856105cd366004613b02565b612636565b3480156105dd575f5ffd5b5061028a6105ec366004613668565b6127cc565b3480156105fc575f5ffd5b5061030c5f7f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b348015610661575f5ffd5b5061028a610670366004613c3f565b612820565b348015610680575f5ffd5b506103856040518060400160405280600581526020017f312e342e3100000000000000000000000000000000000000000000000000000081525081565b6106c5612aa7565b73ffffffffffffffffffffffffffffffffffffffff821615801590610701575073ffffffffffffffffffffffffffffffffffffffff8216600114155b8015610723575073ffffffffffffffffffffffffffffffffffffffff82163014155b61078e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8281165f90815260026020526040902054161561081c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610785565b60026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805473ffffffffffffffffffffffffffffffffffffffff8481165f818152604081208054939094167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179093556001835283549091161790915560038054916108ad83613caa565b909155505060405173ffffffffffffffffffffffffffffffffffffffff8316907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26905f90a28060045414610904576109048161141f565b5050565b610913816041612b12565b8251101561097d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032300000000000000000000000000000000000000000000000000000006044820152606401610785565b5f80808080805b86811015610fa9576041818102890160208101516040820151919092015160ff16955090935091505f849003610cc757885160208a01208a14610a23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032370000000000000000000000000000000000000000000000000000006044820152606401610785565b9193508391610a33876041612b12565b821015610a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032310000000000000000000000000000000000000000000000000000006044820152606401610785565b8751610aa9836020612b49565b1115610b11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032320000000000000000000000000000000000000000000000000000006044820152606401610785565b602082890181015189519091610b34908390610b2e908790612b49565b90612b49565b1115610b9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032330000000000000000000000000000000000000000000000000000006044820152606401610785565b6040517f20c13b0b000000000000000000000000000000000000000000000000000000008082528a85016020019173ffffffffffffffffffffffffffffffffffffffff8916906320c13b0b90610bf8908f908690600401613ce1565b602060405180830381865afa158015610c13573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c379190613d05565b7fffffffff000000000000000000000000000000000000000000000000000000001614610cc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032340000000000000000000000000000000000000000000000000000006044820152606401610785565b5050610eb3565b8360ff16600103610d945791935083913373ffffffffffffffffffffffffffffffffffffffff84161480610d29575073ffffffffffffffffffffffffffffffffffffffff85165f9081526008602090815260408083208d845290915290205415155b610d8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032350000000000000000000000000000000000000000000000000000006044820152606401610785565b610eb3565b601e8460ff161115610e56576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018b9052600190605c0160405160208183030381529060405280519060200120600486610df99190613d44565b604080515f8152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610e45573d5f5f3e3d5ffd5b505050602060405103519450610eb3565b604080515f8152602081018083528c905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610ea6573d5f5f3e3d5ffd5b5050506020604051035194505b8573ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16118015610f13575073ffffffffffffffffffffffffffffffffffffffff8581165f908152600260205260409020541615155b8015610f36575073ffffffffffffffffffffffffffffffffffffffff8516600114155b610f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533032360000000000000000000000000000000000000000000000000000006044820152606401610785565b9394508493600101610984565b50505050505050505050565b5f600173ffffffffffffffffffffffffffffffffffffffff831614801590611002575073ffffffffffffffffffffffffffffffffffffffff8281165f908152600160205260409020541615155b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff821660011480159061100257505073ffffffffffffffffffffffffffffffffffffffff9081165f9081526002602052604090205416151590565b5f3360011480159061108d5750335f9081526001602052604090205473ffffffffffffffffffffffffffffffffffffffff1615155b6110f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130340000000000000000000000000000000000000000000000000000006044820152606401610785565b611120858585857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612b63565b905080156111575760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8905f90a2611182565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375905f90a25b949350505050565b5f606061119986868686611058565b915060405160203d0181016040523d81523d5f602083013e8091505094509492505050565b60605f6111cc836020613d5d565b67ffffffffffffffff8111156111e4576111e46134fe565b6040519080825280601f01601f19166020018201604052801561120e576020820181803683370190505b5090505f5b838110156112305784810154602080830284010152600101611213565b509392505050565b611240612aa7565b73ffffffffffffffffffffffffffffffffffffffff81161580159061127c575073ffffffffffffffffffffffffffffffffffffffff8116600114155b6112e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130310000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8181165f908152600160205260409020541615611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130320000000000000000000000000000000000000000000000000000006044820152606401610785565b600160208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f805473ffffffffffffffffffffffffffffffffffffffff8481165f81815260408082208054949095167fffffffffffffffffffffffff000000000000000000000000000000000000000094851617909455948552835490911681179092555190917fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091a250565b611427612aa7565b600354811115611493576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610785565b60018110156114fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610785565b60048190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b5f5f5f6115518e8e8e8e8e8e8e8e8e8e600554612636565b600580549192505f61156283613caa565b909155505080516020820120915061157b828286611923565b505f6115a57f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85490565b905073ffffffffffffffffffffffffffffffffffffffff811615611640578073ffffffffffffffffffffffffffffffffffffffff166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b81526004016116129c9b9a99989796959493929190613dda565b5f604051808303815f87803b158015611629575f5ffd5b505af115801561163b573d5f5f3e3d5ffd5b505050505b61166c61164f8a6109c4613ef2565b603f61165c8c6040613d5d565b6116669190613f05565b90612ba7565b611678906101f4613ef2565b5a10156116e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031300000000000000000000000000000000000000000000000000000006044820152606401610785565b5f5a905061174f8f8f8f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508e8c5f1461173c578e612b63565b6109c45a61174a9190613f3d565b612b63565b935061175c5a8290612bbd565b9050838061176957508915155b8061177357508715155b6117d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031330000000000000000000000000000000000000000000000000000006044820152606401610785565b5f88156117f0576117ed828b8b8b8b612bd5565b90505b841561183557837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e8260405161182891815260200190565b60405180910390a2611870565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d238260405161186791815260200190565b60405180910390a25b505073ffffffffffffffffffffffffffffffffffffffff811615611912576040517f9327136800000000000000000000000000000000000000000000000000000000815260048101839052831515602482015273ffffffffffffffffffffffffffffffffffffffff8216906393271368906044015f604051808303815f87803b1580156118fb575f5ffd5b505af115801561190d573d5f5f3e3d5ffd5b505050505b50509b9a5050505050505050505050565b6004548061198d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030310000000000000000000000000000000000000000000000000000006044820152606401610785565b61199984848484610908565b50505050565b60605f60035467ffffffffffffffff8111156119bd576119bd6134fe565b6040519080825280602002602001820160405280156119e6578160200160208202803683370190505b5060015f90815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff8116600114611aac5780838381518110611a6057611a60613f50565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092018101919091529181165f90815260029092526040909120541681611aa481613caa565b925050611a2f565b509092915050565b5f5f825160208401855af4805f52503d6020523d5f60403e60403d015ffd5b611b108a8a808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508c9250612d64915050565b73ffffffffffffffffffffffffffffffffffffffff841615611b3557611b3584613121565b611b748787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506131c492505050565b8115611b8a57611b88825f60018685612bd5565b505b3373ffffffffffffffffffffffffffffffffffffffff167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b89604051611bd8959493929190613f7d565b60405180910390a250505050505050505050565b60605f73ffffffffffffffffffffffffffffffffffffffff841660011480611c185750611c1884610fb5565b611c7e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130350000000000000000000000000000000000000000000000000000006044820152606401610785565b5f8311611ce7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130360000000000000000000000000000000000000000000000000000006044820152606401610785565b8267ffffffffffffffff811115611d0057611d006134fe565b604051908082528060200260200182016040528015611d29578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8086165f90815260016020526040812054929450911691505b73ffffffffffffffffffffffffffffffffffffffff821615801590611d94575073ffffffffffffffffffffffffffffffffffffffff8216600114155b8015611d9f57508381105b15611e065781838281518110611db757611db7613f50565b73ffffffffffffffffffffffffffffffffffffffff9283166020918202929092018101919091529281165f90815260019093526040909220549091169080611dfe81613caa565b915050611d58565b73ffffffffffffffffffffffffffffffffffffffff8216600114611e4b5782611e30600183613f3d565b81518110611e4057611e40613f50565b602002602001015191505b808352509250929050565b335f9081526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16611ee1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033300000000000000000000000000000000000000000000000000000006044820152606401610785565b335f818152600860209081526040808320858452909152808220600190555183917ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c91a350565b5f611f3c8c8c8c8c8c8c8c8c8c8c8c612636565b8051906020012090509b9a5050505050505050505050565b611f5c612aa7565b73ffffffffffffffffffffffffffffffffffffffff811615801590611f98575073ffffffffffffffffffffffffffffffffffffffff8116600114155b611ffe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130310000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8281165f90815260016020526040902054811690821614612090576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130330000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8181165f81815260016020526040808220805487861684528284208054919096167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179095558383528054909416909355915190917faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427691a25050565b61212c612aa7565b73ffffffffffffffffffffffffffffffffffffffff81161561225a576040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527fe6d7a83a00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216906301ffc9a790602401602060405180830381865afa1580156121d0573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121f49190614002565b61225a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533330300000000000000000000000000000000000000000000000000000006044820152606401610785565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c881815560405173ffffffffffffffffffffffffffffffffffffffff8316907f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2905f90a25050565b6122ca612aa7565b73ffffffffffffffffffffffffffffffffffffffff811615801590612306575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015612328575073ffffffffffffffffffffffffffffffffffffffff81163014155b61238e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8181165f90815260026020526040902054161561241c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff821615801590612458575073ffffffffffffffffffffffffffffffffffffffff8216600114155b6124be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8381165f90815260026020526040902054811690831614612550576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8281165f81815260026020526040808220805486861680855283852080549288167fffffffffffffffffffffffff00000000000000000000000000000000000000009384161790559589168452828420805482169096179095558383528054909416909355915190917ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf91a260405173ffffffffffffffffffffffffffffffffffffffff8216907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26905f90a2505050565b60605f7fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d85f1b8d8d8d8d60405161266e929190614021565b604051908190038120612694949392918e908e908e908e908e908e908e90602001614030565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090507f19000000000000000000000000000000000000000000000000000000000000007f01000000000000000000000000000000000000000000000000000000000000006127675f7f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b6040517fff0000000000000000000000000000000000000000000000000000000000000093841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040529150509b9a5050505050505050505050565b6127d4612aa7565b6127dd81613121565b60405173ffffffffffffffffffffffffffffffffffffffff8216907f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0905f90a250565b612828612aa7565b8060016003546128389190613f3d565b10156128a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8216158015906128dc575073ffffffffffffffffffffffffffffffffffffffff8216600114155b612942576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8381165f908152600260205260409020548116908316146129d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8281165f81815260026020526040808220805488861684529183208054929095167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790945591815282549091169091556003805491612a4b836140bc565b909155505060405173ffffffffffffffffffffffffffffffffffffffff8316907ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf905f90a28060045414612aa257612aa28161141f565b505050565b333014612b10576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152606401610785565b565b5f825f03612b2157505f611002565b5f612b2c8385613d5d565b905082612b398583613f05565b14612b42575f5ffd5b9392505050565b5f80612b558385613ef2565b905083811015612b42575f5ffd5b5f6001836001811115612b7857612b78613d74565b03612b8f575f5f8551602087018986f49050612b9e565b5f5f855160208701888a87f190505b95945050505050565b5f81831015612bb65781612b42565b5090919050565b5f82821115612bca575f5ffd5b5f6111828385613f3d565b5f8073ffffffffffffffffffffffffffffffffffffffff831615612bf95782612bfb565b325b905073ffffffffffffffffffffffffffffffffffffffff8416612cd957612c3a3a8610612c28573a612c2a565b855b612c348989612b49565b90612b12565b60405190925073ffffffffffffffffffffffffffffffffffffffff82169083156108fc029084905f818181858888f19350505050612cd4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031310000000000000000000000000000000000000000000000000000006044820152606401610785565b612d5a565b612ce785612c348989612b49565b9150612cf48482846133d9565b612d5a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533031320000000000000000000000000000000000000000000000000000006044820152606401610785565b5095945050505050565b60045415612dce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230300000000000000000000000000000000000000000000000000000006044820152606401610785565b8151811115612e39576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152606401610785565b6001811015612ea4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152606401610785565b60015f5b83518110156130ca575f848281518110612ec457612ec4613f50565b602002602001015190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612f21575073ffffffffffffffffffffffffffffffffffffffff8116600114155b8015612f43575073ffffffffffffffffffffffffffffffffffffffff81163014155b8015612f7b57508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b612fe1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff8181165f90815260026020526040902054161561306f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152606401610785565b73ffffffffffffffffffffffffffffffffffffffff9283165f90815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001693821693909317909255600101612ea8565b5073ffffffffffffffffffffffffffffffffffffffff165f90815260026020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001660011790559051600355600455565b3073ffffffffffffffffffffffffffffffffffffffff8216036131a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533430300000000000000000000000000000000000000000000000000000006044820152606401610785565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b60015f8190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f5473ffffffffffffffffffffffffffffffffffffffff161561326c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533130300000000000000000000000000000000000000000000000000000006044820152606401610785565b60015f81905260208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905573ffffffffffffffffffffffffffffffffffffffff82161561090457813b613345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030320000000000000000000000000000000000000000000000000000006044820152606401610785565b613373825f8360017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612b63565b610904576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f47533030300000000000000000000000000000000000000000000000000000006044820152606401610785565b6040805173ffffffffffffffffffffffffffffffffffffffff841660248201526044808201849052825180830390910181526064909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017815282515f93929184919082896127105a03f13d8015613484576020811461348c575f9350613496565b819350613496565b5f51158215171593505b5050509392505050565b73ffffffffffffffffffffffffffffffffffffffff811681146134c1575f5ffd5b50565b80356134cf816134a0565b919050565b5f5f604083850312156134e5575f5ffd5b82356134f0816134a0565b946020939093013593505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f82601f83011261353a575f5ffd5b813567ffffffffffffffff811115613554576135546134fe565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156135c0576135c06134fe565b6040528181528382016020018510156135d7575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f60808587031215613606575f5ffd5b84359350602085013567ffffffffffffffff811115613623575f5ffd5b61362f8782880161352b565b935050604085013567ffffffffffffffff81111561364b575f5ffd5b6136578782880161352b565b949793965093946060013593505050565b5f60208284031215613678575f5ffd5b8135612b42816134a0565b8035600281106134cf575f5ffd5b5f5f5f5f608085870312156136a4575f5ffd5b84356136af816134a0565b935060208501359250604085013567ffffffffffffffff8111156136d1575f5ffd5b6136dd8782880161352b565b9250506136ec60608601613683565b905092959194509250565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b8215158152604060208201525f61118260408301846136f7565b5f5f6040838503121561376e575f5ffd5b50508035926020909101359150565b602081525f612b4260208301846136f7565b5f6020828403121561379f575f5ffd5b5035919050565b5f5f83601f8401126137b6575f5ffd5b50813567ffffffffffffffff8111156137cd575f5ffd5b6020830191508360208285010111156137e4575f5ffd5b9250929050565b5f5f5f5f5f5f5f5f5f5f5f6101408c8e031215613806575f5ffd5b61380f8c6134c4565b9a5060208c0135995060408c013567ffffffffffffffff811115613831575f5ffd5b61383d8e828f016137a6565b909a509850613850905060608d01613683565b965060808c0135955060a08c0135945060c08c0135935061387360e08d016134c4565b92506138826101008d016134c4565b91506101208c013567ffffffffffffffff81111561389e575f5ffd5b6138aa8e828f0161352b565b9150509295989b509295989b9093969950565b5f5f5f606084860312156138cf575f5ffd5b83359250602084013567ffffffffffffffff8111156138ec575f5ffd5b6138f88682870161352b565b925050604084013567ffffffffffffffff811115613914575f5ffd5b6139208682870161352b565b9150509250925092565b5f8151808452602084019350602083015f5b8281101561397057815173ffffffffffffffffffffffffffffffffffffffff1686526020958601959091019060010161393c565b5093949350505050565b602081525f612b42602083018461392a565b5f5f6040838503121561399d575f5ffd5b82356139a8816134a0565b9150602083013567ffffffffffffffff8111156139c3575f5ffd5b6139cf8582860161352b565b9150509250929050565b5f5f5f5f5f5f5f5f5f5f6101008b8d0312156139f3575f5ffd5b8a3567ffffffffffffffff811115613a09575f5ffd5b8b01601f81018d13613a19575f5ffd5b803567ffffffffffffffff811115613a2f575f5ffd5b8d60208260051b8401011115613a43575f5ffd5b60209182019b5099508b01359750613a5d60408c016134c4565b965060608b013567ffffffffffffffff811115613a78575f5ffd5b613a848d828e016137a6565b9097509550613a97905060808c016134c4565b9350613aa560a08c016134c4565b925060c08b01359150613aba60e08c016134c4565b90509295989b9194979a5092959850565b604081525f613add604083018561392a565b905073ffffffffffffffffffffffffffffffffffffffff831660208301529392505050565b5f5f5f5f5f5f5f5f5f5f5f6101408c8e031215613b1d575f5ffd5b8b35613b28816134a0565b9a5060208c0135995060408c013567ffffffffffffffff811115613b4a575f5ffd5b613b568e828f016137a6565b909a509850613b69905060608d01613683565b965060808c0135955060a08c0135945060c08c0135935060e08c0135613b8e816134a0565b92506101008c0135613b9f816134a0565b809250505f6101208d01359050809150509295989b509295989b9093969950565b5f5f60408385031215613bd1575f5ffd5b8235613bdc816134a0565b91506020830135613bec816134a0565b809150509250929050565b5f5f5f60608486031215613c09575f5ffd5b8335613c14816134a0565b92506020840135613c24816134a0565b91506040840135613c34816134a0565b809150509250925092565b5f5f5f60608486031215613c51575f5ffd5b8335613c5c816134a0565b92506020840135613c6c816134a0565b929592945050506040919091013590565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613cda57613cda613c7d565b5060010190565b604081525f613cf360408301856136f7565b8281036020840152612b9e81856136f7565b5f60208284031215613d15575f5ffd5b81517fffffffff0000000000000000000000000000000000000000000000000000000081168114612b42575f5ffd5b60ff828116828216039081111561100257611002613c7d565b808202811582820484141761100257611002613c7d565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60028110613dd6577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b9052565b73ffffffffffffffffffffffffffffffffffffffff8d1681528b6020820152610160604082015289610160820152898b6101808301375f6101808b830101525f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8c01168201613e4f606084018c613da1565b8960808401528860a08401528760c0840152613e8360e084018873ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff861661010084015261018083820301610120840152613ebb6101808201866136f7565b915050613ee161014083018473ffffffffffffffffffffffffffffffffffffffff169052565b9d9c50505050505050505050505050565b8082018082111561100257611002613c7d565b5f82613f38577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561100257611002613c7d565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b608080825281018590525f8660a08301825b88811015613fcc578235613fa2816134a0565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101613f8f565b506020840196909652505073ffffffffffffffffffffffffffffffffffffffff9283166040820152911660609091015292915050565b5f60208284031215614012575f5ffd5b81518015158114612b42575f5ffd5b818382375f9101908152919050565b8b815273ffffffffffffffffffffffffffffffffffffffff8b166020820152604081018a905260608101899052610160810161406f608083018a613da1565b60a082019790975260c081019590955260e085019390935273ffffffffffffffffffffffffffffffffffffffff918216610100850152166101208301526101409091015295945050505050565b5f816140ca576140ca613c7d565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea264697066735822122039119f09ef0bc9fe4baaba24371af49479c950f0e13386515f23a27c2f53eea764736f6c634300081d0033' as `0x${string}`

const SAFE_PROXY_FACTORY_BYTECODE =
  '0x6080604052348015600e575f5ffd5b5061092e8061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610064575f3560e01c806353e5d9351161004d57806353e5d935146100b3578063d18af54d146100c8578063ec9e80bb146100db575f5ffd5b80631688f0b9146100685780633408e470146100a5575b5f5ffd5b61007b6100763660046105d8565b6100ee565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b60405146815260200161009c565b6100bb61018f565b60405161009c919061067a565b61007b6100d6366004610693565b6101d7565b61007b6100e93660046105d8565b6102ec565b5f5f838051906020012083604051602001610113929190918252602082015260400190565b60405160208183030381529060405280519060200120905061013685858361031d565b60405173ffffffffffffffffffffffffffffffffffffffff8781168252919350908316907f4f51faf6c4561ff95f067657e43439f0f856d97c04d9ec9070a6199ad418e2359060200160405180910390a2509392505050565b6060604051806020016101a1906104b2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f90910116604052919050565b5f5f838360405160200161021a92919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b604051602081830303815290604052805190602001205f1c905061023f8686836100ee565b915073ffffffffffffffffffffffffffffffffffffffff8316156102e3576040517f1e52b51800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690631e52b518906102b59085908a908a908a906004016106fb565b5f604051808303815f87803b1580156102cc575f5ffd5b505af11580156102de573d5f5f3e3d5ffd5b505050505b50949350505050565b5f5f8380519060200120836102fe4690565b6040805160208101949094528301919091526060820152608001610113565b5f833b61038b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f53696e676c65746f6e20636f6e7472616374206e6f74206465706c6f7965640060448201526064015b60405180910390fd5b5f6040518060200161039c906104b2565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082820381018352601f9091011660408190526103f4919073ffffffffffffffffffffffffffffffffffffffff881690602001610756565b6040516020818303038152906040529050828151826020015ff5915073ffffffffffffffffffffffffffffffffffffffff821661048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f437265617465322063616c6c206661696c6564000000000000000000000000006044820152606401610382565b8351156104aa575f5f5f8651602088015f875af1036104aa575f5ffd5b509392505050565b6101888061077183390190565b73ffffffffffffffffffffffffffffffffffffffff811681146104e0575f5ffd5b50565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f82601f83011261051f575f5ffd5b813567ffffffffffffffff811115610539576105396104e3565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff821117156105a5576105a56104e3565b6040528181528382016020018510156105bc575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f606084860312156105ea575f5ffd5b83356105f5816104bf565b9250602084013567ffffffffffffffff811115610610575f5ffd5b61061c86828701610510565b93969395505050506040919091013590565b5f81518084528060208401602086015e5f6020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b602081525f61068c602083018461062e565b9392505050565b5f5f5f5f608085870312156106a6575f5ffd5b84356106b1816104bf565b9350602085013567ffffffffffffffff8111156106cc575f5ffd5b6106d887828801610510565b9350506040850135915060608501356106f0816104bf565b939692955090935050565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152608060408201525f610745608083018561062e565b905082606083015295945050505050565b5f83518060208601845e919091019182525060200191905056fe6080604052348015600e575f5ffd5b50604051610188380380610188833981016040819052602b9160b2565b6001600160a01b038116608f5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b5f80546001600160a01b0319166001600160a01b039290921691909117905560dd565b5f6020828403121560c1575f5ffd5b81516001600160a01b038116811460d6575f5ffd5b9392505050565b609f806100e95f395ff3fe608060405273ffffffffffffffffffffffffffffffffffffffff5f54167fa619486e000000000000000000000000000000000000000000000000000000005f3503604b57805f5260205ff35b365f5f375f5f365f845af490503d5f5f3e806064573d5ffd5b503d5ff3fea2646970667358221220dafefb771ebff5004857b7a829461506470d12872914f1d49a6d70e2e8268d0d64736f6c634300081d0033a2646970667358221220c544f3c9dfaf862cd3d6b68307d3ee8efe6b0d7cb29bb95ba6d147ade9e10f2a64736f6c634300081d0033' as `0x${string}`

// Embedded bytecode for the SafeProxy contract (used for bytecode verification)
console.log('\nSafeProxy Bytecode (from SafeProxyFactory):')
const SAFE_PROXY_BYTECODE =
  '0x6080604052348015600e575f5ffd5b50604051610188380380610188833981016040819052602b9160b2565b6001600160a01b038116608f5760405162461bcd60e51b815260206004820152602260248201527f496e76616c69642073696e676c65746f6e20616464726573732070726f766964604482015261195960f21b606482015260840160405180910390fd5b5f80546001600160a01b0319166001600160a01b039290921691909117905560dd565b5f6020828403121560c1575f5ffd5b81516001600160a01b038116811460d6575f5ffd5b9392505050565b609f806100e95f395ff3fe608060405273ffffffffffffffffffffffffffffffffffffffff5f54167fa619486e000000000000000000000000000000000000000000000000000000005f3503604b57805f5260205ff35b365f5f375f5f365f845af490503d5f5f3e806064573d5ffd5b503d5ff3fea2646970667358221220dafefb771ebff5004857b7a829461506470d12872914f1d49a6d70e2e8268d0d64736f6c634300081d0033' as `0x${string}`

// Helper function to compare bytecodes
const compareDeployedBytecode = async (
  publicClient: any,
  address: Address,
  expectedBytecode: `0x${string}`,
  contractName: string
): Promise<boolean> => {
  try {
    const deployedBytecode = await publicClient.getBytecode({ address })

    // Skip metadata hash when comparing bytecodes (last 53 bytes)
    // This is important because the same source code compiled at different times
    // can have different metadata hashes
    const deployedBytecodeWithoutMetadata = deployedBytecode.slice(0, -106)
    const expectedBytecodeWithoutMetadata = expectedBytecode.slice(0, -106)

    const bytecodeMatches =
      deployedBytecodeWithoutMetadata === expectedBytecodeWithoutMetadata

    if (bytecodeMatches) {
      consola.success(`${contractName} bytecode verified successfully`)
    } else {
      consola.error(`${contractName} bytecode verification failed`)
      consola.debug(
        `Expected: ${expectedBytecodeWithoutMetadata.slice(0, 100)}...`
      )
      consola.debug(
        `Deployed: ${deployedBytecodeWithoutMetadata.slice(0, 100)}...`
      )
    }

    return bytecodeMatches
  } catch (error) {
    consola.error(`Error verifying ${contractName} bytecode:`, error)
    return false
  }
}

const main = defineCommand({
  meta: {
    name: 'deploy-standalone-safe',
    description: 'Deploys a standalone Safe multisig contract',
  },
  args: {
    network: {
      type: 'string',
      description: 'Network name (e.g., arbitrum)',
      required: true,
    },
    threshold: {
      type: 'string',
      description: 'Safe threshold (number of signatures required)',
      required: true,
    },
    owners: {
      type: 'string',
      description:
        'Comma-separated list of additional owner addresses (e.g. 0xabc,0xdef). These will be combined with owners from global.json',
      required: false,
    },
    fallbackHandler: {
      type: 'string',
      description: 'Fallback handler address (optional)',
      required: false,
    },
    paymentToken: {
      type: 'string',
      description: 'Payment token address (default: 0x0 for ETH)',
      required: false,
    },
    payment: {
      type: 'string',
      description: 'Payment amount in wei (default: 0)',
      required: false,
    },
    paymentReceiver: {
      type: 'string',
      description: 'Payment receiver address (default: 0x0)',
      required: false,
    },
  },
  async run({ args }) {
    try {
      // Add environment selection prompt with key information
      const environment = (await consola.prompt(
        'Which environment do you want to deploy to?',
        {
          type: 'select',
          options: [
            { value: 'staging', label: 'staging (uses PRIVATE_KEY from .env)' },
            {
              value: 'production',
              label: 'production (uses PRIVATE_KEY_PRODUCTION from .env)',
            },
          ],
        }
      )) as 'staging' | 'production'

      const networkName = args.network as SupportedChain

      // Check if Safe address already exists for the network
      const existingSafeAddress = networks[networkName]?.safeAddress
      if (existingSafeAddress && existingSafeAddress !== zeroAddress) {
        throw new Error(
          `Safe contract already deployed for network ${networkName} at address ${existingSafeAddress}. Please remove or update the safeAddress in networks.json if you want to deploy a new Safe.`
        )
      }

      let threshold: number
      if (typeof args.threshold === 'number') {
        threshold = args.threshold
      } else {
        threshold = Number(args.threshold)
        if (isNaN(threshold)) {
          throw new Error('Invalid threshold value: must be a number')
        }
      }
      if (threshold < 1) {
        throw new Error('Threshold must be at least 1')
      }

      const { walletAccount, publicClient, walletClient } =
        await setupEnvironment(networkName, null, environment)

      consola.info('Environment:', environment)
      consola.info('Deployer (signer) address:', walletAccount.address)

      const ownersArg = args.owners || ''
      const ownersRaw = ownersArg
        .split(',')
        .map((o) => o.trim())
        .filter((o) => o.length > 0)

      // validate owners
      const ownersFromGlobalConfig = globalConfig.safeOwners as Address[]
      const ownersFromArgs = ownersRaw.map((o) => {
        if (!isAddress(o)) {
          throw new Error(`Invalid address in --owners: ${o}`)
        }
        return getAddress(o)
      })

      const owners = [...ownersFromGlobalConfig, ...ownersFromArgs] as Address[]

      if (owners.length === 0) {
        throw new Error('At least one owner address must be provided')
      }

      if (threshold > owners.length) {
        throw new Error('Threshold cannot be greater than the number of owners')
      }

      // optional parameters
      const fallbackHandler =
        args.fallbackHandler && isAddress(args.fallbackHandler)
          ? getAddress(args.fallbackHandler)
          : zeroAddress

      const paymentToken =
        args.paymentToken && isAddress(args.paymentToken)
          ? getAddress(args.paymentToken)
          : zeroAddress

      const payment = args.payment ? BigInt(args.payment) : 0n
      const paymentReceiver =
        args.paymentReceiver && isAddress(args.paymentReceiver)
          ? getAddress(args.paymentReceiver)
          : zeroAddress

      // Validate fallbackHandler is a deployed contract
      if (fallbackHandler !== zeroAddress) {
        const code = await publicClient.getCode({ address: fallbackHandler })
        if (!code || code === '0x') {
          consola.warn(
            'Warning: fallbackHandler has no contract code—fallback calls will fail.'
          )
          const proceed = await consola.prompt(
            'fallbackHandler is not a contract. Proceed anyway?',
            { type: 'confirm', initial: false }
          )
          if (!proceed) throw new Error('Deployment cancelled by user')
        }
      }

      consola.info('Network:', networkName)
      consola.info('Owners:', owners)
      consola.info('Threshold:', threshold)
      consola.info('Fallback Handler:', fallbackHandler)
      consola.info('Payment Token:', paymentToken)
      consola.info('Payment:', payment)
      consola.info('Payment Receiver:', paymentReceiver)

      // First deploy the Safe implementation if not already deployed
      consola.info('Deploying Safe implementation...')
      const implementationHash = await walletClient.deployContract({
        abi: SAFE_ABI,
        bytecode: SAFE_BYTECODE,
        args: [],
      })

      consola.info(
        'Safe implementation deployment transaction sent. Hash:',
        implementationHash
      )

      const implementationReceipt =
        await publicClient.waitForTransactionReceipt({
          hash: implementationHash,
        })
      if (implementationReceipt.status === 'reverted') {
        throw new Error('Safe implementation deployment transaction reverted')
      }

      if (!implementationReceipt.contractAddress) {
        throw new Error(
          'No contract address in implementation deployment receipt'
        )
      }

      const implementationAddress = implementationReceipt.contractAddress
      consola.info('Safe implementation deployed at:', implementationAddress)

      // Verify implementation bytecode immediately
      const implementationVerified = await compareDeployedBytecode(
        publicClient,
        implementationAddress,
        SAFE_BYTECODE,
        'Safe Implementation'
      )

      if (!implementationVerified) {
        throw new Error('Safe implementation bytecode verification failed')
      }

      // Deploy the SafeProxyFactory if not already deployed
      consola.info('Deploying SafeProxyFactory...')
      const factoryHash = await walletClient.deployContract({
        abi: SAFE_PROXY_FACTORY_ABI,
        bytecode: SAFE_PROXY_FACTORY_BYTECODE,
        args: [],
      })

      consola.info(
        'SafeProxyFactory deployment transaction sent. Hash:',
        factoryHash
      )

      const factoryReceipt = await publicClient.waitForTransactionReceipt({
        hash: factoryHash,
      })
      if (factoryReceipt.status === 'reverted') {
        throw new Error('SafeProxyFactory deployment transaction reverted')
      }

      if (!factoryReceipt.contractAddress) {
        throw new Error('No contract address in factory deployment receipt')
      }

      const factoryAddress = factoryReceipt.contractAddress
      consola.info('SafeProxyFactory deployed at:', factoryAddress)

      // Verify factory bytecode immediately
      const factoryVerified = await compareDeployedBytecode(
        publicClient,
        factoryAddress,
        SAFE_PROXY_FACTORY_BYTECODE,
        'SafeProxyFactory'
      )

      if (!factoryVerified) {
        throw new Error('SafeProxyFactory bytecode verification failed')
      }

      // Prepare the initializer data for the proxy
      const initializerData = encodeFunctionData({
        abi: SAFE_ABI,
        functionName: 'setup',
        args: [
          owners,
          BigInt(threshold),
          zeroAddress,
          '0x',
          fallbackHandler,
          paymentToken,
          payment,
          paymentReceiver,
        ],
      })

      // Create proxy using the factory
      consola.info('Creating Safe proxy...')
      const proxyHash = await walletClient.writeContract({
        address: factoryAddress,
        abi: SAFE_PROXY_FACTORY_ABI,
        functionName: 'createProxyWithNonce',
        args: [
          implementationAddress,
          initializerData,
          // Combine timestamp with deployer address to make nonce unique per deployer
          BigInt(Date.now()) ^
            BigInt.asUintN(64, BigInt(walletAccount.address)),
        ],
      })

      consola.info('Proxy creation transaction sent. Hash:', proxyHash)

      const proxyReceipt = await publicClient.waitForTransactionReceipt({
        hash: proxyHash,
      })
      if (proxyReceipt.status === 'reverted') {
        throw new Error('Proxy creation transaction reverted')
      }

      // Find the proxy address from the ProxyCreation event
      const proxyCreationEvents = proxyReceipt.logs
        .map((log) => {
          try {
            // Log the raw event data for debugging
            console.log('Raw log data:', {
              address: log.address,
              data: log.data,
              topics: log.topics,
              blockNumber: log.blockNumber,
              transactionHash: log.transactionHash,
            })

            const decodedEvent = decodeEventLog({
              abi: SAFE_PROXY_FACTORY_ABI,
              data: log.data,
              topics: log.topics,
            })

            console.log('Decoded event:', decodedEvent)
            return decodedEvent
          } catch (error) {
            console.log('Failed to decode log:', error)
            return null
          }
        })
        .filter((event) => {
          console.log('Filtering event:', event)
          return (
            event !== null &&
            'eventName' in event &&
            event.eventName === 'ProxyCreation'
          )
        })

      if (proxyCreationEvents && proxyCreationEvents.length === 0) {
        console.log('All transaction logs:', proxyReceipt.logs)
        throw new Error('Could not find ProxyCreation event in receipt')
      }

      const safeAddress = proxyCreationEvents[0].args.proxy as Address
      consola.info('Safe proxy deployed at:', safeAddress)

      // After successful deployment and verification, update networks.json
      consola.info('Updating networks.json with the new Safe address...')

      // Update the networks configuration
      networks[networkName] = {
        ...networks[networkName],
        safeAddress: safeAddress,
      }

      // Write back to networks.json
      writeFileSync(
        join(__dirname, '../../../config/networks.json'),
        JSON.stringify(networks, null, 2),
        'utf8'
      )

      consola.success(
        'Successfully updated networks.json with the new Safe address!'
      )
      consola.info('')
      consola.info(
        'IMPORTANT: Please manually update the safeWebUrl and safeApiUrl in networks.json for proper Safe UI integration.'
      )
    } catch (error: any) {
      consola.error('Error deploying Safe:', error.message)
      process.exit(1)
    }
  },
})

runMain(main)
