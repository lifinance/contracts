name: Permit2 Bytecode Verifier
# - detects newly added permit2 addresses in config/permit2Proxy.json
# - runs address-specific verification via a dedicated Bash script
# - verifies only the newly added entries (not full file scan)
# - exits with error if any check fails

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read

jobs:
  verify-permit2-addresses:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if config/permit2Proxy.json was changed in this branch
        id: check-file-change
        run: |
          if git diff --name-only origin/main...HEAD | grep -q "config/permit2Proxy.json"; then
            echo "config/permit2Proxy.json has been modified in this branch"
            echo "CONTINUE=true" >> $GITHUB_ENV
          else
            echo "No changes in config/permit2Proxy.json detected in this branch"
            echo "CONTINUE=false" >> $GITHUB_ENV
          fi

      - name: Detect New or Changed Permit2 Addresses
        if: env.CONTINUE == 'true'
        id: detect-changes
        run: |
          echo "Comparing permit2Proxy.json with main branch to find new or updated entries..."

          git fetch origin main --depth=1

          # Load previous file or empty fallback
          if git show origin/main:config/permit2Proxy.json > /dev/null 2>&1; then
            git show origin/main:config/permit2Proxy.json > old.json
          else
            echo "{}" > old.json
          fi

          cp config/permit2Proxy.json new.json

          # Extract changed or new keys
          CHANGED_KEYS=$(jq -r 'to_entries[] | select(.value != (input | .[.key])) | .key' new.json old.json)

          echo "Detected changed or new keys:"
          echo "$CHANGED_KEYS"

          if [ -z "$CHANGED_KEYS" ]; then
            echo "No new or updated permit2 addresses detected."
            echo "SKIP_CHECK=true" >> $GITHUB_ENV
          else
            # Format as JSON array for downstream use
            CHANGED_KEYS_JSON=$(printf '%s\n' $CHANGED_KEYS | jq -R . | jq -cs .)
            echo "changed_keys=$CHANGED_KEYS_JSON" >> $GITHUB_ENV
          fi

      - name: Install Foundry (provides forge and cast)
        if: env.CONTINUE == 'true' && env.SKIP_CHECK != 'true'
        uses: foundry-rs/foundry-toolchain@v1.3.1

      - name: Install dependencies (includes jq via preinstall.sh)
        if: env.CONTINUE == 'true' && env.SKIP_CHECK != 'true'
        run: bun install

      - name: Run Permit2 Verification for New Networks
        if: env.CONTINUE == 'true' && env.SKIP_CHECK != 'true'
        run: |
          echo "Running permit2 verification for new addresses..."
          set -e
          for NETWORK in $(echo $added_networks | jq -r '.[]'); do
            echo "üîç Verifying permit2 address for network: $NETWORK"
            if ./script/utils/permit2/check-permit2.sh "$NETWORK"; then
              echo "‚úÖ $NETWORK verified successfully."
            else
              echo "‚ùå Verification failed for $NETWORK. Exiting..."
              exit 1
            fi
          done
