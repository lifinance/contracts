name: Version Check

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for all branches

      - name: Fetch base branch
        run: git fetch origin +refs/heads/${{ github.event.pull_request.base.ref }}:refs/remotes/origin/${{ github.event.pull_request.base.ref }}

      - name: Get list of modified files
        id: modified_files
        run: |
          BASE_REF="${{ github.event.pull_request.base.ref }}"

          # get all files modified by this PR
          FILES=$(git diff --name-only origin/${BASE_REF} HEAD)

          # make sure that modified files of this PR are available
          if [[ -z $FILES ]]; then
            echo "No files found. This should not happen. Please check the code of the Github action"
            exit 1
          fi

          # Initialize empty variables
          CONTRACTS=""

          # go through all file names and identify facet, periphery & diamond contracts (other contracts dont have versioning)
          while IFS= read -r FILE; do
            if echo "$FILE" | grep -E '^src/Facets/.*\.sol$'; then
              # facet found
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            elif echo "$FILE" | grep -E '^src/Periphery/.*\.sol$'; then
              # periphery found
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            elif echo "$FILE" | grep -E '^src/.*\.sol$'; then
              # diamond contract found
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            fi
          done <<< "$FILES"

          # if none found, exit here as there is nothing to do
          if [[ -z "$CONTRACTS" ]]; then
            echo "No facets or periphery contracts found in files modified/added by this PR"
            exit 0
          fi

          # Write filenames to temporary files (using variables here was causing issues due to the file names)
          echo -e "$FILES" > modified_files.txt # TODO: REMOVE? <<<<<<------------------------------------------------------------------------
          echo -e "$CONTRACTS" > modified_contracts.txt

      - name: Check version tags and update PR title
        env:
          PR_TITLE: ${{github.event.pull_request.title}}
        id: check_versions
        run: |
          BASE_REF="${{ github.event.pull_request.base.ref }}"

          if [[ -z PR_TITLE ]]; then
            echo "Could not extract PR title. Cannot continue."
            exit1
          fi

          if [[ -z BASE_REF ]]; then
            echo "Could not get default branch. Cannot continue."
            exit1
          fi

          # Read tmp files into variables
          CONTRACTS=$(cat modified_contracts.txt)
          echo -e "CONTRACTS=$CONTRACTS"

          # Initialize variables
          MISSING_VERSION_TAG=()
          MISSING_VERSION_UPDATE=()
          UPDATED_CONTRACTS=()


          # Process each file separately
          while IFS= read -r FILE; do
            echo "Now checking contract: $FILE"
            VERSION_TAG=$(grep -E '^/// @custom:version' "$FILE" || true)
            VERSION=$(echo "$VERSION_TAG" | sed -E 's/^\/\/\/ @custom:version ([0-9]+\.[0-9]+\.[0-9]+).*$/\1/' || true)

            echo "Version: $VERSION, Version_Tag: $VERSION_TAG"

            # Check if version tag exists
            if [[ -z "$VERSION_TAG" ]]; then
              echo "File $FILE does not have a version tag at all"
              MISSING_VERSION_TAG+=("$FILE")
            else
              echo "File $FILE does have a version tag"

              # Check if version tag was updated in this PR
              DIFF_OUTPUT=$(git diff -U0 origin/${BASE_REF} HEAD "$FILE")
              if echo "$DIFF_OUTPUT" | grep -qE '^\+/// @custom:version'; then
                echo "Version was updated in $FILE"

                # check if PR title contains string (`${contractName} v${VERSION}`)
                CONTRACT_NAME=$(basename "$FILE" .sol)
                TARGET_STRING=$CONTRACT_NAME"v"$VERSION

                echo "TARGET_STRING: $TARGET_STRING"



                if $PR_TITLE.includes($TARGET_STRING); then
                  echo "PR title contains target string ($TARGET_STRING)"
                else
                  echo "PR title does not contain target string ($TARGET_STRING)"
                fi


                # UPDATED_CONTRACTS+=("$CONTRACT_NAME v$NEW_VERSION")
              else
                echo "Version was not updated in $FILE"
                MISSING_VERSION_UPDATE+=("$FILE")
              fi
            fi
            echo "--------------------"
          done <<< "$CONTRACTS"

          # Output the results
          if [[ ${#MISSING_VERSION_TAG[@]} -ne 0 ]]; then
            echo "Files missing version tags: ${MISSING_VERSION_TAG[*]}"
          fi

          if [[ ${#MISSING_VERSION_UPDATE[@]} -ne 0 ]]; then
            echo "Files with version tags not updated: ${MISSING_VERSION_UPDATE[*]}"
          fi

          if [[ ${#UPDATED_CONTRACTS[@]} -ne 0 ]]; then
            echo "Updated contracts and versions: ${UPDATED_CONTRACTS[*]}"
            UPDATED_CONTRACTS_STR=$(IFS=,; echo "${UPDATED_CONTRACTS[*]}")
            echo "UPDATED_CONTRACTS=$UPDATED_CONTRACTS_STR" >> $GITHUB_ENV
          fi

      - name: Update PR title with updated version info
        uses: actions/github-script@v5
        env:
          PR_TITLE: ${{github.event.pull_request.title}}
        with:
          script: |
            console.log("PR_TITLE:", process.env.PR_TITLE);
            const updatedContracts = process.env.UPDATED_CONTRACTS.split(',');
            console.log("updatedContracts:", updatedContracts);
            let prTitle = process.env.PR_TITLE;

            updatedContracts.forEach(contract => {
              if (!prTitle.includes(contract.trim())) {
                prTitle += ` (${contract.trim()})`;
              }
            });

            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              title: prTitle
            });

      # - name: Post reminder comment
      #   if: steps.check_versions.outputs.MISSING_VERSION_UPDATE
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const MISSING_VERSION_FILES = '${{ steps.check_versions.outputs.MISSING_VERSION_UPDATE }}'.split(',');
      #       const body = `The following files have version tags that were not updated: ${MISSING_VERSION_FILES.join(', ')}. Please update the version tags.`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: body
      #       });

      # - name: Post version updates comment
      #   if: success()
      #   uses: actions/github-script@v5
      #   with:
      #     script: |
      #       const UPDATED_CONTRACTS = '${{ steps.check_versions.outputs.UPDATED_CONTRACTS }}'.split(',');
      #       const body = `The following contracts have been updated with new versions: ${UPDATED_CONTRACTS.join(', ')}.`;
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: body
      #       });
