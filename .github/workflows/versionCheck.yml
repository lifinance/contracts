name: Version Check

on:
  pull_request:
    types: [edited, synchronize]
    branches: []
jobs:
  check-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if PR already contains version updates
        id: check-pr-title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"

          # Marker to detect if the action has already updated the PR
          MARKER="[Version Check Bot]"

          # Check if the marker is in the PR body
          if [[ "$PR_BODY" == *"$MARKER"* ]]; then
            echo "PR already updated by the action. Exiting."
            exit 0
          fi

      - name: Get list of modified files by this PR
        id: modified_files
        run: |
          BASE_REF="${{ github.event.pull_request.base.ref }}"

          FILES=$(git diff --name-only origin/${BASE_REF} HEAD)

          if [[ -z $FILES ]]; then
            echo "No files found. This should not happen. Please check the code of the Github action"
            exit 1
          fi

          CONTRACTS=""

          while IFS= read -r FILE; do
            if echo "$FILE" | grep -E '^src/Facets/.*\.sol$'; then
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            elif echo "$FILE" | grep -E '^src/Periphery/.*\.sol$'; then
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            elif echo "$FILE" | grep -E '^src/.*\.sol$'; then
              CONTRACTS="${CONTRACTS}${FILE}"$'\n'
            fi
          done <<< "$FILES"

          if [[ -z "$CONTRACTS" ]]; then
            echo -e "\033[32mNo version-controlled contracts found in files modified/added by this PR.\033[0m"
            echo -e "\033[32mNo further checks are required.\033[0m"
            echo "CONTINUE=false" >> $GITHUB_ENV
            exit 0
          else
            echo "CONTINUE=true" >> $GITHUB_ENV
          fi

          echo -e "$CONTRACTS" > modified_contracts.txt

      - name: Verify version updates on modified contracts
        id: verify_version_changes
        if: env.CONTINUE == 'true'
        run: |
          CONTRACTS=$(cat modified_contracts.txt)
          MISSING_VERSION_TAG=()
          MISSING_VERSION_UPDATE=()
          UPDATED_CONTRACTS=()

          while IFS= read -r FILE; do
            VERSION_TAG=$(grep -E '^/// @custom:version' "$FILE" || true)
            VERSION=$(echo "$VERSION_TAG" | sed -E 's/^\/\/\/ @custom:version ([0-9]+\.[0-9]+\.[0-9]+).*$/\1/' || true)
            FILENAME=$(basename "$FILE" .sol)

            if [[ -z "$VERSION_TAG" ]]; then
              MISSING_VERSION_TAG+=("$FILE")
            else
              DIFF_OUTPUT=$(git diff origin/${{ github.event.pull_request.base.ref }} HEAD "$FILE")
              if echo "$DIFF_OUTPUT" | grep -qE '^\+/// @custom:version'; then
                NEW_VERSION=$(echo "$VERSION_TAG" | awk '{print $NF}')
                TARGET_STRING="${FILENAME} v${NEW_VERSION}"
                UPDATED_CONTRACTS+=("$TARGET_STRING")
              else
                MISSING_VERSION_UPDATE+=("$FILE")
              fi
            fi
          done <<< "$CONTRACTS"

          if [[ ${#MISSING_VERSION_TAG[@]} -ne 0 ]]; then
            echo "The following files are missing a custom:version tag:"
            echo "${MISSING_VERSION_TAG[*]}"
            exit 1
          fi

          if [[ ${#MISSING_VERSION_UPDATE[@]} -ne 0 ]]; then
            echo "The following contract(s) have been modified but their version tags were not updated:"
            echo "${MISSING_VERSION_UPDATE[*]}"
            exit 1
          fi

          if [[ ${#UPDATED_CONTRACTS[@]} -ne 0 ]]; then
            UPDATED_CONTRACTS_STR=$(IFS=,; echo "${UPDATED_CONTRACTS[*]}")
            echo "UPDATED_CONTRACTS=$UPDATED_CONTRACTS_STR" >> $GITHUB_ENV
            echo -e "${UPDATED_CONTRACTS_STR[*]}" > updated_contracts.txt
          else
            echo -e "\033[32mDid not find any contracts for which version control is activated.\033[0m"
            echo "CONTINUE=false" >> $GITHUB_ENV
            exit 0
          fi

      - name: Compose updated PR title
        if: env.CONTINUE == 'true'
        env:
          PR_TITLE: ${{github.event.pull_request.title}}
        run: |
          UPDATED_CONTRACTS=$(cat updated_contracts.txt)
          PR_TITLE_UPDATED="$PR_TITLE ["

          IFS=',' read -ra UPDATED_ARRAY <<< "$UPDATED_CONTRACTS"
          for TARGET_STRING in "${UPDATED_ARRAY[@]}"; do
            if [[ ! "$PR_TITLE_UPDATED" =~ "$TARGET_STRING" ]]; then
              PR_TITLE_UPDATED="$PR_TITLE_UPDATED$TARGET_STRING, "
            fi
          done

          if [[ "${PR_TITLE_UPDATED: -2}" == ", " ]]; then
            PR_TITLE_UPDATED="${PR_TITLE_UPDATED:0:-2}]"
          elif [[ "${PR_TITLE_UPDATED: -1}" == "[" ]]; then
            PR_TITLE_UPDATED="${PR_TITLE_UPDATED:0:-1}"
          else
            echo "Error: Unexpected ending in PR_TITLE_UPDATED: '$PR_TITLE_UPDATED'"
            exit 1
          fi

          if [[ $PR_TITLE == $PR_TITLE_UPDATED ]]; then
            echo "No PR title updates are required."
            exit 0
          fi

          echo "PR_TITLE_UPDATED=$PR_TITLE_UPDATED" >> $GITHUB_ENV

      - name: Update the PR title on GitHub
        if: env.CONTINUE == 'true'
        env:
          GH_PAT: ${{ secrets.GIT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE_UPDATED: ${{ env.PR_TITLE_UPDATED }}
        run: |
          unset GITHUB_TOKEN
          echo $GH_PAT | gh auth login --with-token
          gh pr edit ${{ github.event.pull_request.number }} --title "${{ env.PR_TITLE_UPDATED }}"

          # Add the marker to the PR body to prevent re-triggering
          gh pr edit ${{ github.event.pull_request.number }} --body "${{ github.event.pull_request.body }} [Version Check Bot]"
