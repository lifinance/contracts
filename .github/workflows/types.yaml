name: Types Bindings

on:
  push:
    branches:
      # - "master" # TODO remove comment
      # - "staging" # TODO remove comment
      - "gh-actions"

env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  generate-tag:
    runs-on: ubuntu-latest
    # TODO replace gh-actions with staging
    if: env.BRANCH_NAME == 'gh-actions' || contains(github.event.head_commit.message, 'major') || contains(github.event.head_commit.message, 'feat') || contains(github.event.head_commit.message, 'fix')
    permissions:
      contents: read

    steps:

      - name: Checkout contracts repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}

      # https://github.com/foundry-rs/foundry-toolchain
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install Node deps
        run: yarn install

      - name: Generate ABI
        run: yarn abi:generate

      - name: Generate types bindings
        run: yarn typechain

      - name: Checkout lifi-contract-types repository
        uses: actions/checkout@v3
        with:
          repository: lifinance/lifi-contract-types
          path: lifi-contract-types
          ssh-key: ${{ secrets.SSH_REPO_TOKEN }}
          # ref: master # TODO remove comment
          ref: gh-actions # TODO remove line

      - name: Copy types bindings
        run: |
          rm -r lifi-contract-types/src/
          mv typechain lifi-contract-types/src
          cp diamondABI/diamond.json lifi-contract-types/src/

      - name: Build contract types
        run: cd lifi-contract-types && yarn install && yarn build

      - name: Retrieve latest Tag
        id: latest_release
        run: |
          # fetch tag releases
          release_json=$(curl https://api.github.com/repos/lifinance/lifi-contract-types/tags)

          # get the latest tag
          LATEST_TAG=$(echo "$release_json" | jq -r '.[0].name')
          # loop through the tag releases
          while read item; do
            tag_name=$(jq -r '.name' <<< "$item")
            # if we're on staging... # TODO remove gh-actions and put staging
            if [[ "$BRANCH_NAME" == "gh-actions" ]]; then
              # ...check if there's already a latest tag beta release
              # and, if present, use it instead of the main one
              if [[ "$tag_name" == "$LATEST_TAG-$beta"* ]]; then
                echo "Found a latest beta release: $LATEST_TAG"
                LATEST_TAG=$tag_name
                break
              fi
            fi
          done <<<$(echo "$release_json" | jq -c -r '.[]')
          echo "latest tag: $LATEST_TAG"
          echo "LATEST_TAG=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Update version
        id: bump_version
        if: contains(github.event.head_commit.message, 'fix')
        uses: christian-draeger/increment-semantic-version@1.1.0
        with:
          current-version: "${{ env.LATEST_TAG }}"
          # TODO keep last one
          version-fragment: "${{ env.BRANCH_NAME == 'gh-actions' && 'beta' || contains(github.event.head_commit.message, 'major') && 'major' || contains(github.event.head_commit.message, 'feat') && 'feature' || contains(github.event.head_commit.message, 'fix') && 'bug' || 'ERR' }}"
          # version-fragment: "${{ env.BRANCH_NAME == 'staging' && 'beta' || contains(github.event.head_commit.message, 'major') && 'major' || contains(github.event.head_commit.message, 'feat') && 'feature' || contains(github.event.head_commit.message, 'fix') && 'bug' || 'ERR' }}"

      - name: Push tag
        if: steps.bump_version.outputs.next-version
        run: |
          cd lifi-contract-types
          jq '.version="${{ steps.bump_version.outputs.next-version }}"' package.json > package.json
          git config user.name github-actions
          git config user.email github-actions@github.com
          echo "Updating version from ${{ env.LATEST_TAG }} to ${{ steps.bump_version.outputs.next-version }}"
          git add src/*
          git add package.json
          git tag -a v${{ steps.bump_version.outputs.next-version }} -m "${{ github.event.head_commit.message }}"
          git push origin tag v${{ steps.bump_version.outputs.next-version }}
          if [[ "${BRANCH_NAME}" == "gh-actions" ]]; then
            git commit -m "actions: new contracts version ${{ steps.bump_version.outputs.next-version }}"
          fi
        # TODO replace gh-actions with master in the bash if
