name: Olympix Mutation Testing

# - runs the olympix mutation testing on newly added or modified solidity contracts inside the src/ folder in a pull request
# - evaluates test suite quality by introducing code mutations and checking if tests catch them
# - only scans diff (added, renamed, modified) solidity files in src/ instead of the whole repository
# - uploads mutation testing results to github code scanning for review and discussion within the PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - 'src/**/*.sol'
  workflow_dispatch:

permissions:
  contents: read # required to fetch repository contents
  security-events: write # required to upload SARIF results to GitHub Code Scanning

jobs:
  mutation-testing:
    name: Mutation Testing Quality Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Solidity Files
        id: get-files
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual run: get all Solidity files in src/
            echo "Manual trigger detected - analyzing all Solidity files in src/"
            ALL_FILES=$(find src/ -name "*.sol" -type f | tr '\n' ' ')
            echo "FILES_CHANGED=true" >> $GITHUB_ENV
          else
            # PR trigger: get changed files only
            echo "PR trigger detected - analyzing changed Solidity files only"
            # This will be handled by the changed-files action below
            echo "FILES_CHANGED=false" >> $GITHUB_ENV
          fi
          echo "ALL_SOL_FILES=$ALL_FILES" >> $GITHUB_ENV

      - name: Get added, renamed, modified Solidity Files (PR only)
        if: github.event_name != 'workflow_dispatch'
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            src/**/*.sol

      - name: Convert Files to Args
        id: format-args
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual run: use all files
            files="$ALL_SOL_FILES"
            echo "SHOULD_RUN=true" >> $GITHUB_ENV
          else
            # PR run: use changed files
            if [[ "${{ steps.changed-files.outputs.any_changed }}" == "true" ]]; then
              files="${{ steps.changed-files.outputs.all_changed_files }}"
              echo "SHOULD_RUN=true" >> $GITHUB_ENV
            else
              echo "SHOULD_RUN=false" >> $GITHUB_ENV
              exit 0
            fi
          fi
          
          # Convert relative paths to absolute paths and format as --path arguments
          args=""
          for file in $files; do
            args="$args --path $GITHUB_WORKSPACE/$file"
          done
          echo "ARGS=$args" >> $GITHUB_ENV

      - name: Run Olympix Mutation Testing
        if: env.SHOULD_RUN == 'true'
        uses: olympix/integrated-security@main
        env:
          OLYMPIX_API_TOKEN: ${{ secrets.OLYMPIX_API_TOKEN }}
          GITHUB_REPOSITORY_ID: ${{ github.repository_id }}
          OLYMPIX_GITHUB_COMMIT_HEAD_SHA: ${{ github.sha }}
          OPIX_DEBUG: true
        with:
          args: generate-mutation-tests -w $GITHUB_WORKSPACE ${{ env.ARGS }} --timeout 300 --include-dot-env

      - name: Wait for Mutation Testing Results
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          echo "‚úÖ Mutation testing initiated successfully"
          echo "üìä Results will be uploaded to GitHub Code Scanning automatically"
          echo "üîç Check the Security tab for mutation testing alerts" 