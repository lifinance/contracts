name: Olympix Mutation Testing

# - runs the olympix mutation testing on all solidity contracts inside the src/ folder
# - evaluates test suite quality by introducing code mutations and checking if tests catch them
# - always scans all solidity files in src/ to maintain consistent GitHub Code Scanning state
# - uploads mutation testing results to github code scanning for review and discussion within the PR

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    paths:
      - 'src/**/*.sol'
  workflow_dispatch:

permissions:
  contents: read # required to fetch repository contents
  security-events: write # required to upload SARIF results to GitHub Code Scanning

jobs:
  mutation-testing:
    name: Mutation Testing Quality Check
    runs-on: ubuntu-latest
    outputs:
      SHOULD_RUN: ${{ steps.create-batches.outputs.SHOULD_RUN }}
      BATCHES_JSON: ${{ steps.create-batches.outputs.BATCHES_JSON }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Get Solidity Files
        id: get-files
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual run: get all Solidity files in src/
            echo "Manual trigger detected - analyzing all Solidity files in src/"
            ALL_FILES=$(find src/ -name "*.sol" -type f | tr '\n' ' ')
            echo "FILES_CHANGED=true" >> $GITHUB_ENV
          else
            # PR trigger: get changed files only
            echo "PR trigger detected - analyzing changed Solidity files only"
            # This will be handled by the changed-files action below
            echo "FILES_CHANGED=false" >> $GITHUB_ENV
          fi
          echo "ALL_SOL_FILES=$ALL_FILES" >> $GITHUB_ENV

      # Note: We always run on all files to maintain consistent Code Scanning state
      # This prevents false "fixed" status when files aren't included in mutation testing

      - name: Create Batches
        id: create-batches
        run: |
          # Always run on ALL contracts to maintain consistent Code Scanning state
          # This prevents alerts from being marked as "fixed" when files aren't tested
          echo "Processing ALL contracts in src/ to maintain consistent mutation testing state"
          files=$(find src/ -name "*.sol" -type f)
          
          if [[ $(echo "$files" | wc -w) -gt 0 ]]; then
            echo "SHOULD_RUN=true" >> $GITHUB_OUTPUT
            echo "Found $(echo "$files" | wc -w) Solidity files to analyze"
          else
            echo "SHOULD_RUN=false" >> $GITHUB_OUTPUT
            echo "No Solidity files found in src/"
            exit 0
          fi
          
          # Split files into batches of 100
          file_array=($files)
          total_files=${#file_array[@]}
          echo "Total files found: $total_files"
          
          batches="["
          batch_size=100
          for ((i=0; i<total_files; i+=batch_size)); do
            batch_files=("${file_array[@]:i:batch_size}")
            batch_args=$(printf -- "-p %s " "${batch_files[@]}")
            
            if [[ $i -gt 0 ]]; then
              batches+=","
            fi
            batches+="{\"args\":\"generate-mutation-tests $batch_args\",\"batch_num\":$((i/batch_size + 1))}"
          done
          batches+="]"
          
          echo "BATCHES_JSON=$batches" >> $GITHUB_OUTPUT
          echo "Created $((((total_files-1)/batch_size)+1)) batches"

  # Process each batch
  mutation-testing-batches:
    name: Mutation Testing Batch
    runs-on: ubuntu-latest
    needs: mutation-testing
    if: needs.mutation-testing.outputs.SHOULD_RUN == 'true'
    strategy:
      matrix:
        batch: ${{ fromJson(needs.mutation-testing.outputs.BATCHES_JSON) }}
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Olympix Mutation Testing (Batch ${{ matrix.batch.batch_num }})
        uses: olympix/mutation-test-generator@main
        env:
          OLYMPIX_API_TOKEN: ${{ secrets.OLYMPIX_API_TOKEN }}
          GITHUB_REPOSITORY_ID: ${{ github.repository_id }}
          OLYMPIX_GITHUB_COMMIT_HEAD_SHA: ${{ github.sha }}
          OPIX_DEBUG: true
        with:
          args: ${{ matrix.batch.args }}

      - name: Summary
        run: |
          echo "‚úÖ File discovery completed"
          echo "üìù Files will be processed individually in parallel jobs"
          echo "üîç Check the Security tab for mutation testing alerts after completion" 