# - Smart Contract Core Dev Approval checker
# - makes sure that every pull_request is at least reviewed by one Smart Contract Core Developer
#   (member of group https://github.com/orgs/lifinance/teams/smart-contract-core)

name: SC Core Dev Approval Check

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: read # required to read PR reviews and metadata
  contents: read # required to read local workspace contents (e.g. access tmp file)

jobs:
  core-dev-approval:
    if: ${{ github.event.pull_request.draft == false }} # will only run once the PR is in "Ready for Review" state
    runs-on: ubuntu-latest
    steps:
      - name: Get smart-contract-core Team Members
        env:
          GH_PAT: ${{ secrets.GIT_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |

          ##### unset the default git token (does not have sufficient rights to get team members)
          unset GITHUB_TOKEN
          ##### use the Personal Access Token to log into git CLI
          echo $GH_PAT | gh auth login --with-token

          ##### Function that uses github's REST API via CLI to get team members
          getTeamMembers() {
            local org=$1
            local team=$2
            gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/$org/teams/$team/members" | jq -r '.[].login'
          }

          ORG_NAME="lifinance"
          TEAM_SLUG="smart-contract-core"

          # Get members of each group
          echo "Fetching members of $TEAM_SLUG..."
          MEMBERS=$(getTeamMembers $ORG_NAME $TEAM_SLUG)

          #### check if any members were returned
          if [[ -z $MEMBERS ]]; then
            echo -e "\033[31mERROR: Could not retrieve team members of group $TEAM_SLUG\033[0m"
            exit 1
          fi

          echo "The following Github users are members of team smart-contract-core: "
          echo "$MEMBERS"

          echo -e "$MEMBERS" > sc_core_dev_members.txt

      - name: Check if PR is approved by at least one SC core dev
        id: check-core-dev-approval
        if: success()
        uses: actions/github-script@v7
        env:
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.review.pull_request.number }}
        with:
          script: |
            const fs = require('fs');

            const colors = {
              reset: "\033[0m",
              red: "\033[31m",
              green: "\033[32m",
            };

            const coreDevsFile = 'sc_core_dev_members.txt';
            const coreDevs = fs.readFileSync(coreDevsFile, 'utf-8').split(/\r?\n/).filter(Boolean);

            const pullNumber = process.env.PR_NUMBER;
            if (!pullNumber) {
              console.log(`${colors.red}No PR number found in context.${colors.reset}`);
              core.setFailed("PR number is missing.");
              return;
            }

            async function getAllReviews(github, owner, repo, pull_number) {
              let page = 1;
              let allReviews = [];

              while (true) {
                const { data: reviews } = await github.rest.pulls.listReviews({
                  owner,
                  repo,
                  pull_number,
                  per_page: 100,
                  page,
                  headers: {
                    'Cache-Control': 'no-cache'
                  }
                });

                if (reviews.length === 0) break;

                allReviews = [...allReviews, ...reviews];
                page++;
              }

              return allReviews;
            }

            const allReviews = await getAllReviews(github, context.repo.owner, context.repo.repo, pullNumber);

            if (!allReviews.length) {
              console.log(`${colors.red}No reviews found.${colors.reset}`);
              core.setFailed("Required approval is missing.");
              return;
            }

            // Keep only the latest review per user
            const latestReviews = {};
            allReviews.forEach(review => {
              latestReviews[review.user.login] = review;
            });

            // Get final list of approvals
            const approvedReviews = Object.values(latestReviews).filter(review =>
              review.state === "APPROVED" && !review.dismissed_at
            );

            if (!approvedReviews.length) {
              console.log(`${colors.red}No valid approvals found.${colors.reset}`);
              core.setFailed("Required approval is missing.");
              return;
            }

            // Get approving users
            const reviewerHandles = approvedReviews.map(review => review.user.login);

            console.log(`This PR has been approved by: ${reviewerHandles}`);

            if (reviewerHandles.some(handle => coreDevs.includes(handle))) {
              console.log(`${colors.green}PR approved by a Smart Contract Core Dev.${colors.reset}`);
              core.setOutput('approved', 'true');
            } else {
              console.log(`${colors.red}Approval from a core dev is missing.${colors.reset}`);
              core.setFailed("Required approval is missing.");
            }
