name: Enforce Test Coverage
on:
  push:

jobs:
  enforceTestCoverage:
    runs-on: ubuntu-latest

    permissions:
      pull-requests: write
      contents: read
    env:
      ETH_NODE_URI_MAINNET: ${{ secrets.ETH_NODE_URI_MAINNET }}
      ETH_NODE_URI_POLYGON: ${{ secrets.ETH_NODE_URI_POLYGON }}
      ETH_NODE_URI_GOERLI: ${{ secrets.ETH_NODE_URI_GOERLI }}
      ETH_NODE_URI_ARBITRUM: ${{ secrets.ETH_NODE_URI_ARBITRUM }}
      ETH_NODE_URI_BSC: ${{ secrets.ETH_NODE_URI_BSC }}
      ETH_NODE_URI_GNOSIS: ${{ secrets.ETH_NODE_URI_GNOSIS }}
      GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      MIN_TEST_COVERAGE: 8 # 80 percent for now, will be increased to 100% gradually
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install TypeScript and Node.js type definitions
        run: npm install --save-dev ts-node @types/node --legacy-peer-deps

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1.0.10
        with:
          version: nightly

      - name: Install submodules
        run: |
          git config --global url."https://github.com/".insteadOf "git@github.com:"
          git submodule update --init --recursive

      - name: Generate coverage report
        run: |
          npm install
          # forge coverage --report lcov --force && npx ts-node utils/filter_lcov.ts lcov.info lcov-filtered.info 'test/' 'script/'
          rm lcov.info

      - name: Setup LCOV
        uses: hrishikesh-kadam/setup-lcov@v1

      - name: Extract total test coverage
        run: |
          # Path to the lcov info file
          LCOV_FILE="lcov-filtered.info"

          # Initialize counters
          total_lines_found=0
          total_lines_hit=0
          total_functions_found=0
          total_functions_hit=0
          total_branches_found=0
          total_branches_hit=0

          # Read through the lcov file
          while IFS= read -r line; do
              case $line in
                  LF:*)
                      total_lines_found=$((total_lines_found + ${line#LF:}))
                      ;;
                  LH:*)
                      total_lines_hit=$((total_lines_hit + ${line#LH:}))
                      ;;
                  FNF:*)
                      total_functions_found=$((total_functions_found + ${line#FNF:}))
                      ;;
                  FNH:*)
                      total_functions_hit=$((total_functions_hit + ${line#FNH:}))
                      ;;
                  BRF:*)
                      total_branches_found=$((total_branches_found + ${line#BRF:}))
                      ;;
                  BRH:*)
                      total_branches_hit=$((total_branches_hit + ${line#BRH:}))
                      ;;
              esac
          done < "$LCOV_FILE"

          # Calculate percentages with high precision
          line_coverage_percentage=$(echo "scale=4; $total_lines_hit / $total_lines_found * 100" | bc)
          function_coverage_percentage=$(echo "scale=4; $total_functions_hit / $total_functions_found * 100" | bc)
          branch_coverage_percentage=$(echo "scale=4; $total_branches_hit / $total_branches_found * 100" | bc)

          # Format results with two decimal places and alignment
          line_coverage_percentage=$(printf "%.2f" "$line_coverage_percentage")
          function_coverage_percentage=$(printf "%.2f" "$function_coverage_percentage")
          branch_coverage_percentage=$(printf "%.2f" "$branch_coverage_percentage")

          # Prepare aligned output
          line_coverage_report=$(printf "Line Coverage:      %6s%% (%4d / %4d lines)" "$line_coverage_percentage" "$total_lines_hit" "$total_lines_found")
          function_coverage_report=$(printf "Function Coverage:  %6s%% (%4d / %4d functions)" "$function_coverage_percentage" "$total_functions_hit" "$total_functions_found")
          branch_coverage_report=$(printf "Branch Coverage:    %6s%% (%4d / %4d branches)" "$branch_coverage_percentage" "$total_branches_hit" "$total_branches_found")

          # Output results
          echo "$line_coverage_report"
          echo "$function_coverage_report"
          echo "$branch_coverage_report"

          # Store in GitHub environment variables
          echo "LINE_COVERAGE_REPORT=$line_coverage_report" >> $GITHUB_ENV
          echo "FUNCTION_COVERAGE_REPORT=$function_coverage_report" >> $GITHUB_ENV
          echo "BRANCH_COVERAGE_REPORT=$branch_coverage_report" >> $GITHUB_ENV

          # Check against minimum threshold
          if (( $(echo "$line_coverage_percentage >= $MIN_TEST_COVERAGE" | bc -l) )); then
              echo "Test coverage ($line_coverage_percentage%) is above min threshold ($MIN_TEST_COVERAGE%)."
          else
              echo "Test coverage ($line_coverage_percentage%) is below min threshold ($MIN_TEST_COVERAGE%)."
              echo "Check failed"
              exit 1
          fi

      - name: Comment coverage values on PR
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            ## Test Coverage Report
            ${{ env.LINE_COVERAGE_REPORT }}
            ${{ env.FUNCTION_COVERAGE_REPORT }}
            ${{ env.BRANCH_COVERAGE_REPORT }}
