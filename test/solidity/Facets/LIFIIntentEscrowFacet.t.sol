// SPDX-License-Identifier: LGPL-3.0-only
pragma solidity ^0.8.17;

import { LibAsset } from "lifi/Libraries/LibAsset.sol";
import { TestBaseFacet } from "../utils/TestBaseFacet.sol";
import { LibAllowList } from "lifi/Libraries/LibAllowList.sol";
import { LIFIIntentEscrowFacet } from "lifi/Facets/LIFIIntentEscrowFacet.sol";

import { MandateOutput, StandardOrder } from "lifi/Interfaces/IOIF.sol";

contract AlwaysYesOracle {
    function isProven(
        uint256,
        /* remoteChainId */ bytes32,
        /* outputOracle */ bytes32,
        /* application */ bytes32 /* dataHash */
    ) external pure returns (bool) {
        return true;
    }

    function efficientRequireProven(
        bytes calldata /* proofSeries */
    ) external pure {}
}
interface ILIFIIntentEscrowSettler {
    event Open(bytes32 indexed orderId, bytes order);

    function orderStatus(bytes32 orderid) external returns (uint8);

    function finalise(
        StandardOrder calldata order,
        uint32[] calldata timestamps,
        bytes32[] memory solvers,
        bytes32 destination,
        bytes calldata call
    ) external;

    function orderIdentifier(
        StandardOrder calldata order
    ) external view returns (bytes32);

    function orderIdentifier(
        bytes calldata order
    ) external view returns (bytes32);
}

// Stub LIFIIntentEscrowFacet Contract
contract TestLIFIIntentEscrowFacet is LIFIIntentEscrowFacet {
    constructor(address escrowSettler) LIFIIntentEscrowFacet(escrowSettler) {}

    function addDex(address _dex) external {
        LibAllowList.addAllowedContract(_dex);
    }

    function setFunctionApprovalBySignature(bytes4 _signature) external {
        LibAllowList.addAllowedSelector(_signature);
    }
}

contract LIFIIntentEscrowFacetTest is TestBaseFacet {
    error FailedInputSettlerDeployment();
    LIFIIntentEscrowFacet.LIFIIntentEscrowData internal validLIFIIntentData;
    TestLIFIIntentEscrowFacet internal lifiIntentEscrowFacet;
    TestLIFIIntentEscrowFacet internal baseLIFIIntentEscrowFacet;

    address internal lifiIntentEscrowSettler;

    address internal alwaysYesOracle;

    function deployDependencies(address escrowContract) internal {
        bytes
            memory inputSettlerEscrowLIFIInitCode = hex"610120604052346101b35761457e6020813803918261001d816101b7565b9384928339810103126101b357516001600160a01b038116908190036101b357306080524660a05260a061005160406101b7565b6016815260208101907f496e707574536574746c6572457363726f774c49464900000000000000000000825261008760406101b7565b60018152603160f81b602091820152905190912060c08190527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660e0819052604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f815293840192909252908201524660608201523060808201522061010052600280546001600160c01b031916600160801b600160c01b03179055638b78c6d8198190555f7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08180a360405161438d90816101f182396080518181816121d30152614163015260a0518181816121b00152614140015260c05181818161223501526141d5015260e05181818161225b01526141fb01526101005181818161218e015261411e0152f35b5f80fd5b6040519190601f01601f191682016001600160401b038111838210176101dc57604052565b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f905f3560e01c9081630ea90a12146123ab5750806319d7700a1461235157806325692962146122ea5780632dff692d146122965780633644e5151461215e578063382f431b1461207b57806345e6b5cb14611d4b57806348f49eaf14611b1a5780634f2f368c146118ab57806354d1f13d146118475780635791edc0146117fe578063586f9800146116b0578063609dbfa014611694578063715018a6146115f5578063722edc5014610ef157806372903ef8146108f45780638198db87146107f357806384b0196e146106b55780638da5cb5b14610644578063944cec49146102f85780639efa612014610296578063c0e313521461024d578063f04e283e146101e1578063f2fde38b146101845763fee81cf414610131575f80fd5b346101815760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815761016861243e565b9063389a75e1600c5252602080600c2054604051908152f35b80fd5b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610181576101b761243e565b6101bf613ca4565b8060601b156101d4576101d190613cdb565b80f35b637448fbae82526004601cfd5b5060207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815761021461243e565b61021c613ca4565b63389a75e1600c528082526020600c20805442116102405790826101d19255613cdb565b636f5e881883526004601cfd5b503461018157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018157602067ffffffffffffffff60025460401c16604051908152f35b50346101815760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760408091600435815280602052818120602435825260205220600163ffffffff82541691015482519182526020820152f35b50346101815760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760043567ffffffffffffffff81116106405780600401906101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc823603011261063c5760243567ffffffffffffffff81116106385761038c9036906004016124d1565b9060443567ffffffffffffffff81116106045736602382011215610604576103be9036906024816004013591016125e7565b926064359060843567ffffffffffffffff8111610634576103e39036906004016123ed565b9060a4359367ffffffffffffffff8511610630576105076044856104398a8a6104328f8f9c9061042761041d61042c9336906004016123ed565b9990980135612b25565b613704565b9b6127e2565b518b6137fc565b610442856137ca565b73ffffffffffffffffffffffffffffffffffffffff610500603960405161046a60608261258e565b8181527f322064657374696e6174696f6e2c62797465732063616c6c2900000000000000604060208301927f416c6c6f774f70656e2862797465733332206f7264657249642c62797465733384520152206104c6368b8b6140e6565b6020815191012060405190602082019283528d60408301528960608301526080820152608081526104f860a08261258e565b51902061411c565b9116614234565b156106085790816105258b949361051d8b6127e2565b51888d6138c7565b82610561575b505050506101d195610559610542608484016126a8565b9160e461055160a4860161270d565b94019061278e565b929091613ae6565b73ffffffffffffffffffffffffffffffffffffffff169061058560c486018b6126b9565b8391933b15610604578580946105ca604051978896879586947f73e57c270000000000000000000000000000000000000000000000000000000086526004860161273e565b03925af180156105f9576105e0575b808061052b565b816105ea9161258e565b6105f557865f6105d9565b8680fd5b6040513d84823e3d90fd5b8580fd5b60048a7f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b8980fd5b8780fd5b8380fd5b8280fd5b5080fd5b503461018157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275473ffffffffffffffffffffffffffffffffffffffff60405191168152f35b503461018157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018157604080516107959290916107a2906106fc818561258e565b601684527f496e707574536574746c6572457363726f774c4946490000000000000000000060208501528051610732828261258e565b600181527f3100000000000000000000000000000000000000000000000000000000000000602082015281519586957f0f00000000000000000000000000000000000000000000000000000000000000875260e0602088015260e0870190612502565b9185830390860152612502565b904660608401523060808401528060a084015282820360c084015260206060519283815201916080915b8181106107da575050500390f35b82518452859450602093840193909201916001016107cc565b503461018157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760025467ffffffffffffffff8160801c1642106108cc5777ffffffffffffffff0000000000000000000000000000000067ffffffffffffffff604083811c82167fffffffffffffffff0000000000000000ffffffffffffffff000000000000000085161792909217600281905582519382168452821c1660208301527ff4d7ed52853df2cc4ba27e957fd3aa1d94f69284bc77aad28f532be71a7f88569190819081015b0390a180f35b6004827f6f4cfed1000000000000000000000000000000000000000000000000000000008152fd5b50346101815760c07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610181576004359067ffffffffffffffff8211610181578160040160a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8436030112610640576024359067ffffffffffffffff821161063c57816004016101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc843603011261063857604435916064359360a43567ffffffffffffffff81116105f5576109d39036906004016123ed565b9490936109e36044840135612b25565b6109ec81613704565b92843593848103610ec1578952600160205260ff60408a2054166004811015610e9457600103610e6c579060c4610a249201906126b9565b9690958115610e44574260843510610e1c578289528860205260408920848a526020526040892095600187018054610df457839060848d0198610a668a6126a8565b63ffffffff428116908216811115610de75763ffffffff91829103165b1681547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001617905555604051610aba60808261258e565b605e81527f4f7264657250757263686173652862797465733332206f7264657249642c616460208201527f64726573732064657374696e6174696f6e2c62797465732063616c6c2c75696e60408201527f74363420646973636f756e742c75696e7433322074696d65546f42757929000060609091015260248b01917ff00f802d1ce651d5856a4ca7166cecc3167fb51158ec536ca589f2639b6a62ef8c610b618561270d565b906044019d610b708f8b613d71565b3690610b7b926140e6565b80519060200120906064019a610b908c613d5c565b90610b9a906126a8565b9160405193602085019586528b604086015273ffffffffffffffffffffffffffffffffffffffff166060850152608084015267ffffffffffffffff1660a083015263ffffffff1660c082015260c08152610bf560e08261258e565b519020610c019061411c565b610c22929073ffffffffffffffffffffffffffffffffffffffff8716614234565b15610dbf57610c42610c3c67ffffffffffffffff9261270d565b96613d5c565b168890670de0b6b3a764000003670de0b6b3a76400008111915b898110610d3457505050917f4cdacd323f9cdecf06f8a27bbdd8d66110c7a2d97ea8430a8c3c67d6eb2f6cc06040610ca295938a9b9582519182526020820152a2613d71565b93909184610cae578580f35b73ffffffffffffffffffffffffffffffffffffffff1690813b1561060457858094610d08604051978896879586947f73e57c270000000000000000000000000000000000000000000000000000000086526004860161273e565b03925af180156105f957610d1f575b808080808580f35b81610d299161258e565b61018157805f610d17565b610d3f818b8b612b95565b602081013584610d925783810290808204851490151715610d9257600192918a670de0b6b3a7640000610d8c93049173ffffffffffffffffffffffffffffffffffffffff33913516613df5565b01610c5c565b60248d7f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b6004897f815e1d64000000000000000000000000000000000000000000000000000000008152fd5b505063ffffffff8d610a83565b60048b7f3367b554000000000000000000000000000000000000000000000000000000008152fd5b6004897f203d82d8000000000000000000000000000000000000000000000000000000008152fd5b6004897fcf7899a1000000000000000000000000000000000000000000000000000000008152fd5b6004897f2916ae33000000000000000000000000000000000000000000000000000000008152fd5b60248a7f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b89604491867f0517adf9000000000000000000000000000000000000000000000000000000008352600452602452fd5b50346101815760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760043567ffffffffffffffff811161064057610f419036906004016123ed565b610f4c92919261241b565b9060443567ffffffffffffffff811161063857610f6d9036906004016123ed565b90919060643573ffffffffffffffffffffffffffffffffffffffff8116918282036105f55760843567ffffffffffffffff811161063457610fb29036906004016123ed565b959094610fc260608b0135612b25565b60bc8a013560e01c97610fd489612b5e565b610fe4609c8c013560e01c612b5e565b610fed856137ca565b610ff7828c612a36565b98898b52600160205260ff60408c20541660048110156115c8576115a057898b52600160205260408b2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055897fddffb592d6434d02d388cf2eb4fbfa796fbfcd09e278d3466e7194dfd3c23a048c80a28415806115785761154b577fff00000000000000000000000000000000000000000000000000000000000000808535165b168061149a5750508360011161063057906110e693929160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3095019301918c612e6b565b60e0870135870160206040820191013591868852600160205260ff604089205416600481101561146d5760010361144557868852600160205261112d600260408a20612633565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275473ffffffffffffffffffffffffffffffffffffffff81161561143c5767ffffffffffffffff60025416908892915b8a5b86811061138b5750505060407f6d1ab3c99edb0b034244c4a410afdfc12e0fef57313ad9bc936138f2b080025b918151903382526020820152a28461130b575b505050505060cc83013560601c9261010081013501602060408201910135907f01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821682036112de57906112148160071b613a57565b924263ffffffff1691855b818110611299578680878a803b156112955761127391839160405180809581947fae0dd770000000000000000000000000000000000000000000000000000000008352602060048401526024830190612502565b03915afa80156105f9576112845750f35b8161128e9161258e565b6101815780f35b5050fd5b806112a76001928488613aa6565b60806112b582883389613f65565b9160208460071b8b0191604081013582840152803560408401520135606082015201520161121f565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b823b156105f557908680949392611351604051978896879586947f73e57c270000000000000000000000000000000000000000000000000000000086526004860161273e565b03925af180156113805790839161136b575b8080806111bf565b816113759161258e565b61064057815f611363565b6040513d85823e3d90fd5b909192935061139b818787612b95565b604051906113a882612545565b8190604081019036821161143857915b81831061142857505050906114088286602073ffffffffffffffffffffffffffffffffffffffff6001965116920151916113fc67ffffffffffffffff881684613e8c565b80611413575b50613f0b565b01908993929161117f565b9092611420828a86613f0b565b03915f611402565b82358152602092830192016113b8565b8e80fd5b8791908961117d565b6004887f2916ae33000000000000000000000000000000000000000000000000000000008152fd5b6024897f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b939493919250907f01000000000000000000000000000000000000000000000000000000000000008103611520575060e08b01358b01928060011161151c579189939160017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611517979501940192604060208201359101612c81565b6110e6565b8a80fd5b7f5d0b6f18000000000000000000000000000000000000000000000000000000008b5260045260248afd5b60248b7f4e487b710000000000000000000000000000000000000000000000000000000081526032600452fd5b507fff00000000000000000000000000000000000000000000000000000000000000806110a0565b60048b7f2916ae33000000000000000000000000000000000000000000000000000000008152fd5b60248c7f4e487b710000000000000000000000000000000000000000000000000000000081526021600452fd5b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018157611627613ca4565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff748739275580f35b50346101815760206116a861042736612461565b604051908152f35b50346101815760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815760043567ffffffffffffffff811680820361063c5766b1a2bc2ec5000090611706613ca4565b116117d65760025462093a8067ffffffffffffffff42160167ffffffffffffffff81116112de577fffffffffffffffff00000000000000000000000000000000ffffffffffffffff909116604092831b6fffffffffffffffff00000000000000001617608091821b77ffffffffffffffff0000000000000000000000000000000016176002819055825181841c67ffffffffffffffff90811682529190921c1660208201527f6d210eb34c3d14a71fcc9a91f13c009700f6dbb5054d0aed52c21edf0c3286f791819081016108c6565b6004827f0f4820d8000000000000000000000000000000000000000000000000000000008152fd5b503461018157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261018157602067ffffffffffffffff60025460801c16604051908152f35b50807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101815763389a75e1600c52338152806020600c2055337ffa7b8eab7da67f412cc9575ed43464468f9bfbae89d1675917346ca6d8fe3c928280a280f35b5034611ac15760a07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac1576004359067ffffffffffffffff8211611ac157816004016101007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8436030112611ac15760243567ffffffffffffffff8111611ac15761193f9036906004016124d1565b9060443567ffffffffffffffff8111611ac1576119609036906004016124d1565b906064359160843567ffffffffffffffff8111611ac1576119859036906004016123ed565b9061198f856137ca565b61199c60448b0135612b25565b6119a588613704565b948315611aed57843573ffffffffffffffffffffffffffffffffffffffff6119cf8a8a848b6137fc565b163303611ac557816119e291888c6138c7565b82611a21575b50505087611a1b611a11611a0260846101d19b9c016126a8565b9860e461055160a4860161270d565b94909336916125e7565b96613ae6565b73ffffffffffffffffffffffffffffffffffffffff1690611a4560c48c018a6126b9565b8391933b15611ac1575f8094611a8a604051978896879586947f73e57c270000000000000000000000000000000000000000000000000000000086526004860161273e565b03925af18015611ab657611aa0575b80806119e8565b6101d197505f611aaf9161258e565b5f96611a99565b6040513d5f823e3d90fd5b5f80fd5b7ff6412b5a000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b34611ac157611b2836612461565b611b356040820135612b25565b63ffffffff611b46606083016126a8565b16421115611d2357611b70611b5a82613704565b91611b6860c08201826126b9565b92909161270d565b91835f52600160205260ff60405f2054166004811015611cf657600103611cce57835f526001602052611ba7600360405f20612633565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927549273ffffffffffffffffffffffffffffffffffffffff841615611cc75767ffffffffffffffff60025416915b5f5b818110611c2557867ffe509803c09416b28ff3d8f690c8b0c61462a892c46d5430c8fb20abe472daf05f80a2005b611c30818387612b95565b60405190611c3d82612545565b81906040810190368211611ac157915b818310611cb75750505090611c9c8285602073ffffffffffffffffffffffffffffffffffffffff600196511692015191611c9167ffffffffffffffff8a1684613e8c565b80611ca25750613f0b565b01611bf7565b9092611caf828d86613f0b565b03918c611402565b8235815260209283019201611c4d565b5f91611bf5565b7f2916ae33000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b7feb21afbd000000000000000000000000000000000000000000000000000000005f5260045ffd5b34611ac15760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac15760043567ffffffffffffffff8111611ac157611d9a9036906004016123ed565b611da261241b565b9160443567ffffffffffffffff8111611ac157611dc39036906004016123ed565b611dd36060849693960135612b25565b60bc83013560e01c94611de586612b5e565b611df5609c85013560e01c612b5e565b611dff8585612a36565b95865f52600160205260ff60405f2054166004811015611cf657611cce57865f52600160205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055821580155f1461205357611aed577fff00000000000000000000000000000000000000000000000000000000000000808335165b1680611f5057505081600111611ac157611eca9260017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3094019201908686612e6b565b825f52600160205260ff60405f2054166004811015611cf657600103611f28577ff04c8c2bbc4615307a4fd1bb1348feffc61a6407b1342c86f80c0ceeffd352eb91611f2360405192839260208452602084019161266a565b0390a2005b7fc5f2be51000000000000000000000000000000000000000000000000000000005f5260045ffd5b9093907f01000000000000000000000000000000000000000000000000000000000000008103611fcb575060e085013585019083600111611ac157611fc69460017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8a9601940192604060208201359101612c81565b611eca565b9350905073ffffffffffffffffffffffffffffffffffffffff91501633148061202a575b15611fff5750611fc68282612ba5565b7f5d0b6f18000000000000000000000000000000000000000000000000000000005f5260045260245ffd5b507fff000000000000000000000000000000000000000000000000000000000000008114611fef565b507fff0000000000000000000000000000000000000000000000000000000000000080611e86565b34611ac15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac15760043567ffffffffffffffff8111611ac1576120ca9036906004016123ed565b6120d76060830135612b25565b6120e760bc83013560e01c612b5e565b6120f7609c83013560e01c612b5e565b6121018183612a36565b91825f52600160205260ff60405f2054166004811015611cf657611cce57825f52600160205260405f2060017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00825416179055611eca8282612ba5565b34611ac1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac1577f0000000000000000000000000000000000000000000000000000000000000000467f000000000000000000000000000000000000000000000000000000000000000014307f0000000000000000000000000000000000000000000000000000000000000000141615612205575b602090604051908152f35b50602061228f60a06040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201524660608201523060808201522090565b90506121fa565b34611ac15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac1576004355f52600160205260ff60405f2054166040516004821015611cf6576020918152f35b5f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac15763389a75e1600c52335f526202a30042016020600c2055337fdbf36a107da19e49527a7176a1babf963b4b0ff8cde35ee35d6cd8f1f9ac7e1d5f80a2005b34611ac15760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac15760043567ffffffffffffffff8111611ac1576116a86123a560209236906004016123ed565b90612a36565b34611ac1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112611ac15760209067ffffffffffffffff600254168152f35b9181601f84011215611ac15782359167ffffffffffffffff8311611ac15760208381860195010111611ac157565b6024359073ffffffffffffffffffffffffffffffffffffffff82168203611ac157565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611ac157565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112611ac1576004359067ffffffffffffffff8211611ac1577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8261010092030112611ac15760040190565b9181601f84011215611ac15782359167ffffffffffffffff8311611ac1576020808501948460051b010111611ac157565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602080948051918291828752018686015e5f8582860101520116010190565b6040810190811067ffffffffffffffff82111761256157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761256157604052565b67ffffffffffffffff81116125615760051b60200190565b9291906125f3816125cf565b93612601604051958661258e565b602085838152019160051b8101928311611ac157905b82821061262357505050565b8135815260209182019101612617565b906004811015611cf65760ff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008354169116179055565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b3563ffffffff81168103611ac15790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215611ac1570180359067ffffffffffffffff8211611ac157602001918160061b36038313611ac157565b3573ffffffffffffffffffffffffffffffffffffffff81168103611ac15790565b9190811015611aed5760051b0190565b949391949290928560408201604083525260608101935f965b808810612776575050612773949550602081850391015261266a565b90565b90946040808281896001953701960197019690612757565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215611ac1570180359067ffffffffffffffff8211611ac157602001918160051b36038313611ac157565b805115611aed5760200190565b8051821015611aed5760209160051b010190565b905f5b8181106128135750505090565b90919260408082818760019537019401929101612806565b90357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe182360301811215611ac157016020813591019167ffffffffffffffff8211611ac1578136038313611ac157565b82602082016020835252604081019260408160051b83010193835f917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182360301945b8484106128cf575050505050505090565b909192939495967fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0828203018352873587811215611ac1576020612987600193878394019081358152838201358482015260408201356040820152606082013560608201526080820135608082015260a082013560a082015261297961296e61295b60c085018561282b565b61010060c086015261010085019161266a565b9260e081019061282b565b9160e081850391015261266a565b9901930194019291959493906128be565b9692602098957fffffffffffffffffffffffffffffffffffffffff00000000000000000000000095867fffffffff00000000000000000000000000000000000000000000000000000000959381879560a49f9c978e5260601b168d8d015260601b1660348b015260488a015260e01b16606888015260e01b16606c86015260601b16607084015260848301528051928391018483015e01015f815290565b9050612ab5612b1f60e08301358301604051612a8f81612a63602082018560406020839801359101612803565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810183528261258e565b519020612ae161010085013585016040519481604060208894013591016020840161287b565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810185528461258e565b612a63604051938492602084019660cc81013560601c9060bc81013560e01c90609c81013560e01c90602c604082013591013560601c30468d612998565b51902090565b468103612b2f5750565b7f24497bc3000000000000000000000000000000000000000000000000000000005f526004524660245260445ffd5b63ffffffff16421015612b6d57565b7f4a313c2d000000000000000000000000000000000000000000000000000000005f5260045ffd5b9190811015611aed5760061b0190565b905060e0810135016020604082019101355f5b818110612bc457505050565b80612bee612bd56001938587612b95565b6020612be18235613dc2565b9101359030903390613df5565b01612bb8565b929360e09473ffffffffffffffffffffffffffffffffffffffff6127739997948163ffffffff9516875216602086015260408501525f606085015216608083015260a08201528160c0820152019161266a565b67ffffffffffffffff811161256157601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b94959293909560018714612d88575b508035019485358103612d60575f5b818110612caf5750505050505050565b612cba818388612b95565b90813573ffffffffffffffffffffffffffffffffffffffff166001820160051b8901358901813b15611ac1575f9186838a612d368b95604051998a97889687957f88b7ab630000000000000000000000000000000000000000000000000000000087526020604081870135960194013590309060048901612bf4565b03925af1918215611ab657600192612d50575b5001612c9f565b5f612d5a9161258e565b5f612d49565b7f06f68b62000000000000000000000000000000000000000000000000000000005f5260045ffd5b8615611aed575f8387612e0588612dd98596888b6040519788956020808801997f88b7ab63000000000000000000000000000000000000000000000000000000008b52013590309060248901612bf4565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810184528361258e565b8273ffffffffffffffffffffffffffffffffffffffff8a351692612e2884613e5c565b51925af13d15612e66573d612e3c81612c47565b90612e4a604051928361258e565b81525f60203d92013e5b612e5e575f612c90565b505050505050565b612e54565b919492939260e083013583016020810135939250604001612e8b846125cf565b91612e99604051938461258e565b8483527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612ec6866125cf565b015f5b8181106136e1575050612edb856125cf565b94612ee9604051968761258e565b8086527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0612f16826125cf565b015f5b8181106136be5750505f5b8181106136105750505050604051906060820182811067ffffffffffffffff821117612561576040528152602081019560408301358752604082019260bc81013560e01c845260405160208101907f5065726d6974325769746e6573732875696e74333220657870697265732c616482527f647265737320696e7075744f7261636c652c4d616e646174654f75747075745b60408201527f5d206f757470757473294d616e646174654f757470757428627974657333322060608201527f6f7261636c652c6279746573333220736574746c65722c75696e74323536206360808201527f6861696e49642c6279746573333220746f6b656e2c75696e7432353620616d6f60a08201527f756e742c6279746573333220726563697069656e742c62797465732063616c6c60c08201527f2c627974657320636f6e7465787429000000000000000000000000000000000060e082015260cf815261308860ef8261258e565b519020906101008101358101602060408201910135906130aa8260051b613a57565b915f5b818110613487575050506020815191012060cc6040519260208401948552609c81013560e01c6040850152013560601c60608301526080820152608081526130f660a08261258e565b519020916101409361310b604051958661258e565b61011485527f5065726d6974325769746e657373207769746e657373294d616e646174654f7560208601527f747075742862797465733332206f7261636c652c62797465733332207365747460408601527f6c65722c75696e7432353620636861696e49642c6279746573333220746f6b6560608601527f6e2c75696e7432353620616d6f756e742c62797465733332207265636970696560808601527f6e742c62797465732063616c6c2c627974657320636f6e7465787429546f6b6560a08601527f6e5065726d697373696f6e73286164647265737320746f6b656e2c75696e743260c08601527f353620616d6f756e74295065726d6974325769746e6573732875696e7433322060e08601527f657870697265732c6164647265737320696e7075744f7261636c652c4d616e646101008601527f6174654f75747075745b5d206f757470757473290000000000000000000000006101208601526e22d473030f116ddee9f6b43ac78ba33b15611ac1576040517ffe8ec1a700000000000000000000000000000000000000000000000000000000815260c060048201529151606060c48401528051610124840181905292998a9897969594936101448a019392602001905f5b818110613435575050505160e4890152516101048801527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc878203016024880152602080865192838152019501905f5b8181106133e9575050506133bb935f979387969373ffffffffffffffffffffffffffffffffffffffff61338b9416604489015260648801527ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc878303016084880152612502565b917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8584030160a486015261266a565b0381836e22d473030f116ddee9f6b43ac78ba35af18015611ab6576133dd5750565b5f6133e79161258e565b565b919697509192939460206040826134236001948b516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b01970191019189979695949392613324565b9195969798999a5091929360206040826134726001948a516020809173ffffffffffffffffffffffffffffffffffffffff81511684520151910152565b0196019101918c9a99989796959493926132d4565b806134956001928486613aa6565b60c060856040516134a6838261258e565b8181527f746578742900000000000000000000000000000000000000000000000000000060a060208301927f4d616e646174654f75747075742862797465733332206f7261636c652c62797484527f6573333220736574746c65722c75696e7432353620636861696e49642c62797460408201527f6573333220746f6b656e2c75696e7432353620616d6f756e742c62797465733360608201527f3220726563697069656e742c62797465732063616c6c2c627974657320636f6e60808201520152209161358061357983830183613d71565b36916140e6565b6020815191012060a061359961357960e0850185613d71565b60208151910120926040519460208601968752813560408701526020820135606087015260408201356080870152606082013583870152608082013590860152013560e084015261010083015261012082015261012081526135fd6101408261258e565b51902060208260051b87010152016130ad565b8061361e6001928487612b95565b61362d60208201359135613dc2565b61363681613e5c565b73ffffffffffffffffffffffffffffffffffffffff6040519161365883612545565b16815281602082015261366b83896127ef565b5261367682886127ef565b506040519061368482612545565b73ffffffffffffffffffffffffffffffffffffffff8616825260208201526136ac828a6127ef565b526136b781896127ef565b5001612f24565b6020906040516136cd81612545565b5f81525f8382015282828b01015201612f19565b6020906040516136f081612545565b5f81525f8382015282828801015201612ec9565b61370d8161270d565b612b1f61371c606084016126a8565b91612a636137b361372f608087016126a8565b61373b60a0880161270d565b613762612a6361374e60c08b018b6126b9565b929060405192839160208301958691612803565b5190209161377360e08a018a61278e565b94906137876040519687926020840161287b565b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0810186528561258e565b60405197889660208089019b01359030468d612998565b60601b156137d457565b7fb8e78e80000000000000000000000000000000000000000000000000000000005f5260045ffd5b929092835f525f60205260405f20905f5260205260405f2080549060018101908154948561382e575b50505050505090565b8415611aed5763ffffffff613842826126a8565b169460015b818110613894575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000831690555f905563ffffffff16111561388f578080808080613825565b905090565b63ffffffff6138ac6138a783858761272e565b6126a8565b168088106138be575b50600101613847565b965060016138b5565b6138d89093919360c08101906126b9565b9073ffffffffffffffffffffffffffffffffffffffff831691855f52600160205260ff60405f2054166004811015611cf657600103611cce57855f526001602052613927600260405f20612633565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927549273ffffffffffffffffffffffffffffffffffffffff841615613a505767ffffffffffffffff60025416915b5f5b8181106139b6575050505050507f6d1ab3c99edb0b034244c4a410afdfc12e0fef57313ad9bc936138f2b080025b9160409182519182526020820152a2565b6139c1818387612b95565b604051906139ce82612545565b81906040810190368211611ac157915b818310613a405750505090613a2d8285602073ffffffffffffffffffffffffffffffffffffffff600196511692015191613a2267ffffffffffffffff8a1684613e8c565b80613a335750613f0b565b01613977565b9092611420828d86613f0b565b82358152602092830192016139de565b5f91613975565b90613a6182612c47565b613a6e604051918261258e565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0613a9c8294612c47565b0190602036910137565b9190811015611aed5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0181360301821215611ac1570190565b92909596949391818803613c7c577f01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82168203613c4f57613b298260071b613a57565b975f5b838110613bab57505050505050505073ffffffffffffffffffffffffffffffffffffffff16803b15611ac157613b9a915f9160405180809581947fae0dd770000000000000000000000000000000000000000000000000000000008352602060048401526024830190612502565b03915afa8015611ab6576133dd5750565b613bb96138a782848a61272e565b63ffffffff811663ffffffff8816818110613c21575050908a6080826020613bfb8d600197613bf4613bec868e8e613aa6565b9586936127ef565b518d613f65565b938560071b01916040810135828401528035604084015201356060820152015201613b2c565b7f0ad67c09000000000000000000000000000000000000000000000000000000005f5260045260245260445ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b7f12d48609000000000000000000000000000000000000000000000000000000005f5260045ffd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927543303613cce57565b6382b429005f526004601cfd5b73ffffffffffffffffffffffffffffffffffffffff16807fffffffffffffffffffffffffffffffffffffffffffffffffffffffff74873927547f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffff7487392755565b3567ffffffffffffffff81168103611ac15790565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215611ac1570180359067ffffffffffffffff8211611ac157602001918136038313611ac157565b8060a01c613dcd5790565b7f5f3d6d4f000000000000000000000000000000000000000000000000000000005f5260045ffd5b916040519360605260405260601b602c526f23b872dd000000000000000000000000600c5260205f6064601c82855af1908160015f51141615613e3e575b50505f606052604052565b3b153d171015613e4f575f80613e33565b637939f4245f526004601cfd5b3b15613e6457565b7ffbc1d8e2000000000000000000000000000000000000000000000000000000005f5260045ffd5b9080158015613eaf575b613ea957670de0b6b3a764000091020490565b50505f90565b613ede57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821015613e96565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b91906014526034526fa9059cbb0000000000000000000000005f5260205f6044601082855af1908160015f51141615613f47575b50505f603452565b3b153d171015613f58575f80613f3f565b6390b8ec185f526004601cfd5b9092613f7460c0820182613d71565b9190613f8360e0830183613d71565b93909261ffff82116140be5761ffff8511614096578492829160405198899860208a019b8c5260408a015260e01b7fffffffff00000000000000000000000000000000000000000000000000000000166060890152606081013560648901526080810135608489015260a0013560a48801528160f01b7fffff0000000000000000000000000000000000000000000000000000000000001660c488015260c68701378401918160f01b7fffff0000000000000000000000000000000000000000000000000000000000001660c684015260c88301370160c601600281015f9052036002017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081018252612b1f908261258e565b7fd94d6ce6000000000000000000000000000000000000000000000000000000005f5260045ffd5b7f4fe9ad23000000000000000000000000000000000000000000000000000000005f5260045ffd5b9291926140f282612c47565b91614100604051938461258e565b829481845281830111611ac1578281602093845f960137010152565b7f0000000000000000000000000000000000000000000000000000000000000000467f000000000000000000000000000000000000000000000000000000000000000014307f00000000000000000000000000000000000000000000000000000000000000001416156141a7575b6719010000000000005f52601a52603a526042601820905f603a52565b5061422f60a06040517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81527f000000000000000000000000000000000000000000000000000000000000000060208201527f000000000000000000000000000000000000000000000000000000000000000060408201524660608201523060808201522090565b61418a565b909193925f9473ffffffffffffffffffffffffffffffffffffffff83161561434e5760405195600487016024880195604489019160648a0193873b156142bd575094602096948a948260649581958c9d9e9a7f1626ba7e00000000000000000000000000000000000000000000000000000000809e9c525260408a52523701915afa9151141690565b99975050939150508060401461430a576041146142da5750505050565b60408092939496508101355f1a60205281375b5f526020600160805f825afa511860601b3d11915f606052604052565b507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9192939550602081013590601b8260ff1c0160205235604052166060526142ed565b505f945050505056fea26469706673582212208d44c0eafbb6e8b6f65cc9b639c828d0b882311cd47c2cb5ba5ea99ee86bbe9664736f6c634300081e00330000000000000000000000000000000000000000000000000000000000000000";

        address etchTo = address(uint160(uint256(keccak256("tempAddr"))));
        vm.etch(etchTo, inputSettlerEscrowLIFIInitCode);

        (bool success, bytes memory runtimeBytecode) = etchTo.call("");
        if (!success) revert FailedInputSettlerDeployment();

        vm.etch(escrowContract, runtimeBytecode);
    }

    function setUp() public {
        customBlockNumberForForking = 17130542;
        initTestBase();

        // deploy oracle & allocator
        alwaysYesOracle = address(new AlwaysYesOracle());

        lifiIntentEscrowSettler = address(
            uint160(uint256(keccak256("escrowSettler")))
        );

        deployDependencies(lifiIntentEscrowSettler);

        baseLIFIIntentEscrowFacet = new TestLIFIIntentEscrowFacet(
            lifiIntentEscrowSettler
        );

        bytes4[] memory functionSelectors = new bytes4[](4);
        functionSelectors[0] = baseLIFIIntentEscrowFacet
            .startBridgeTokensViaLIFIIntentEscrow
            .selector;
        functionSelectors[1] = baseLIFIIntentEscrowFacet
            .swapAndStartBridgeTokensViaLIFIIntentEscrow
            .selector;
        functionSelectors[2] = baseLIFIIntentEscrowFacet.addDex.selector;
        functionSelectors[3] = baseLIFIIntentEscrowFacet
            .setFunctionApprovalBySignature
            .selector;

        addFacet(
            diamond,
            address(baseLIFIIntentEscrowFacet),
            functionSelectors
        );
        lifiIntentEscrowFacet = TestLIFIIntentEscrowFacet(address(diamond));
        lifiIntentEscrowFacet.addDex(ADDRESS_UNISWAP);
        lifiIntentEscrowFacet.setFunctionApprovalBySignature(
            uniswap.swapExactTokensForTokens.selector
        );
        lifiIntentEscrowFacet.setFunctionApprovalBySignature(
            uniswap.swapTokensForExactETH.selector
        );
        lifiIntentEscrowFacet.setFunctionApprovalBySignature(
            uniswap.swapETHForExactTokens.selector
        );

        setFacetAddressInTestBase(
            address(lifiIntentEscrowFacet),
            "LIFIIntentEscrowFacet"
        );

        // adjust bridgeData
        bridgeData.bridge = "LIFIIntent";
        bridgeData.destinationChainId = 137;

        // produce valid LIFIIntentEscrowData
        validLIFIIntentData = LIFIIntentEscrowFacet.LIFIIntentEscrowData({
            receiverAddress: bytes32(uint256(uint160(bridgeData.receiver))),
            user: address(uint160(123123321321)),
            nonce: uint256(100),
            expires: type(uint32).max,
            fillDeadline: type(uint32).max,
            inputOracle: alwaysYesOracle, // Not used
            outputOracle: bytes32(0), // not used
            outputSettler: bytes32(0), // not used
            outputToken: bytes32(uint256(888999888)),
            outputAmount: 999888999,
            outputCall: hex"",
            outputContext: hex""
        });
    }

    event Finalised(
        bytes32 indexed orderId,
        bytes32 solver,
        bytes32 destination
    );

    event IntentRegistered(bytes32 indexed orderId, StandardOrder order);

    function test_LIFIIntent_deposit_status() external {
        bool isNative = false;
        vm.startPrank(USER_SENDER);
        usdc.approve(address(baseLIFIIntentEscrowFacet), bridgeData.minAmount);

        bridgeData.sendingAssetId = isNative ? address(0) : address(usdc);

        // Check that the execution happens as we would expect it to.

        MandateOutput[] memory outputs = new MandateOutput[](1);
        outputs[0] = MandateOutput({
            oracle: validLIFIIntentData.outputOracle,
            settler: validLIFIIntentData.outputSettler,
            chainId: bridgeData.destinationChainId,
            token: validLIFIIntentData.outputToken,
            amount: validLIFIIntentData.outputAmount,
            recipient: validLIFIIntentData.receiverAddress,
            call: validLIFIIntentData.outputCall,
            context: validLIFIIntentData.outputContext
        });
        uint256[2][] memory idsAndAmounts = new uint256[2][](1);
        idsAndAmounts[0] = [
            uint256(uint160(bridgeData.sendingAssetId)),
            bridgeData.minAmount
        ];

        StandardOrder memory order = StandardOrder({
            user: validLIFIIntentData.user,
            nonce: validLIFIIntentData.nonce,
            originChainId: block.chainid,
            expires: validLIFIIntentData.expires,
            fillDeadline: validLIFIIntentData.fillDeadline,
            inputOracle: validLIFIIntentData.inputOracle,
            inputs: idsAndAmounts,
            outputs: outputs
        });

        bytes32 orderId = ILIFIIntentEscrowSettler(lifiIntentEscrowSettler)
            .orderIdentifier(order);

        vm.expectEmit(false, false, false, true);
        emit ILIFIIntentEscrowSettler.Open(orderId, abi.encode(order));

        baseLIFIIntentEscrowFacet.startBridgeTokensViaLIFIIntentEscrow{
            value: LibAsset.isNativeAsset(bridgeData.sendingAssetId)
                ? bridgeData.minAmount
                : 0
        }(bridgeData, validLIFIIntentData);
        vm.stopPrank();

        // Check that we can redeem the intent (i.e. that we registered the intent we expected.)

        address solver = address(7788778877);
        vm.startPrank(solver);

        uint8 orderStatus = ILIFIIntentEscrowSettler(lifiIntentEscrowSettler)
            .orderStatus(orderId);
        assertEq(orderStatus, 1); // Check orderStatus is deposited.

        uint32[] memory timestamps = new uint32[](1);
        timestamps[0] = type(uint32).max;
        bytes32 solverIdentifier = bytes32(uint256(uint160(solver)));
        bytes32[] memory solvers = new bytes32[](1);
        solvers[0] = solverIdentifier;

        vm.expectEmit();
        emit Finalised(orderId, solverIdentifier, solverIdentifier);

        ILIFIIntentEscrowSettler(lifiIntentEscrowSettler).finalise(
            order,
            timestamps,
            solvers,
            bytes32(uint256(uint160(solver))),
            hex""
        );

        assertEq(usdc.balanceOf(solver), bridgeData.minAmount);
    }

    function test_revert_LIFIIntent_wrong_receiver() external {
        bool isNative = false;
        vm.startPrank(USER_SENDER);
        usdc.approve(address(baseLIFIIntentEscrowFacet), bridgeData.minAmount);

        bridgeData.sendingAssetId = isNative ? address(0) : address(usdc);

        // Incorrectly modify the receiverAddress
        validLIFIIntentData.receiverAddress = bytes32(
            uint256(uint160(bridgeData.receiver)) + 1
        );

        vm.expectRevert(abi.encodeWithSignature("ReceiverDoNotMatch()"));
        baseLIFIIntentEscrowFacet.startBridgeTokensViaLIFIIntentEscrow{
            value: LibAsset.isNativeAsset(bridgeData.sendingAssetId)
                ? bridgeData.minAmount
                : 0
        }(bridgeData, validLIFIIntentData);
    }

    function initiateBridgeTxWithFacet(bool isNative) internal override {
        if (isNative) {
            lifiIntentEscrowFacet.startBridgeTokensViaLIFIIntentEscrow{
                value: bridgeData.minAmount
            }(bridgeData, validLIFIIntentData);
        } else {
            lifiIntentEscrowFacet.startBridgeTokensViaLIFIIntentEscrow(
                bridgeData,
                validLIFIIntentData
            );
        }
    }

    function initiateSwapAndBridgeTxWithFacet(
        bool isNative
    ) internal override {
        if (isNative) {
            lifiIntentEscrowFacet.swapAndStartBridgeTokensViaLIFIIntentEscrow{
                value: swapData[0].fromAmount
            }(bridgeData, swapData, validLIFIIntentData);
        } else {
            lifiIntentEscrowFacet.swapAndStartBridgeTokensViaLIFIIntentEscrow(
                bridgeData,
                swapData,
                validLIFIIntentData
            );
        }
    }

    function testBase_CanBridgeNativeTokens() public override {
        // facet does not support bridging of native assets
    }

    function testBase_CanSwapAndBridgeNativeTokens() public override {
        // facet does not support bridging of native assets
    }
}
